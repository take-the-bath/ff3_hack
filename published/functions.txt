開発にあたり解析した処理のリファレンス
(rev31)
------------------------------------------------------------------------------------------------------
アドレスはオリジナルのもの
パラメータは書いてないものがあります


凡例:
 fix - オリジナルでバグと思われる部分を修正したもの
 opt - オリジナルの仕様は変えずに処理を最適化(サイズ・速度) したもの
 del - 最適化の結果不要になったので完全になくなったもの
 ext - 新たな機能を追加したもの
 これらでマークしたものはオリジナルとアドレスが違うことがほとんど
=======================================================================================================
[bank 30-31]
$30:9e58 invokeBattleFunction
	[in] u8 $4c : functionId (
		0 : doSpecial 2: decideEnemyAction 3: doFight 4: useItem 
		5: calcBattleParam 7: getDataAddr 8:rebuildBackpackItems)

$30:9e8a doFight (battleFunction03)	//たたかう
	[in] BattleCharacter* $6e : pAttacker
	[in] BattleCharacter* $70 : pTarget
	[out] u16 $7e4f[8] : targetDamages, u16 $7e5f[8] : attackerDamages
	指定された攻撃側と防御側のパラメータを元に打撃の計算処理を行う
	二刀流の場合はそれぞれ別個に計算し最後に足し合わせる
	分裂処理もダメージ確定後行う
	プレイヤー側で一人でも逃げるを試行した者がいる場合一時的に溜めている扱いとなる
	対象が蛙・小人・溜めている場合 防御力0・回数0扱いした上で攻撃側の攻撃力2倍
	対象が暗闇の場合回避率半減

$31:a2b5 getActor2C
	[in] BattleCharacter* $6e : pActor	[out] u8 A : pActor[2c], u8 Y : #2c 

$31:a2ba cacheStatus 
	[in] BattleCharacter* $6e : pActor
	[in] BattleCharacter* $70 : pTarget
	[out] u8 $(e0+id*2)[2] : status of $70
	[out] u8 $(f0+id*2)[2] : status of $6e

$31:a2e9 battleFunction06

$31:a368 sumDamageForDisplay
	[in,out] u16 $6a,6b : resultDamage
	[in] u16 $78 : damageToAdd

$31:a389 increaseAttackPowerByValueAt
	[in] u8 y : offset
	[in,out] u16 $25,2b : atk
	手裏剣やオニオンソードに設定されてる追加攻撃力を足す
	1本もつごとに両手にボーナスがかかるため両手にもつとものすごく強い

$31:a397 isRangedWeapon
	[in] u8 $741e : isDouble
	[in] u8 $741f : numberOfWeaponHand
	[out] bool carry : ranged
	竪琴フラグがどちらかの手に立っているか
	装備武器のidが3f,40,41ならtrue

$31:a400 loadBattlePlayers 
	[in] BattleCharacter* $5b : pPlayer ($7575)
	[in] BattleCharacter* $5d : pEnemy ($7675)

$31:a482 loadPlayer
	[in] u8 $52 : playerIndex
	[in] u8 $5f : offset
	[out] u8 A : jobParam.+4 (of this player)
	[out] u8 $18 : player.lv
	[out] u8 $19 : player.status
	[out] u16 $1b,1d : player.hp ,player.maxHp
	[out] u8 $1f[8] : player.mp
	[out] u8 $27 : player.jobLv
	[out] u8 $40[4] : jobParam.+0~3
	[out] u8 $44 : = $0052
	[out] u8 $46[2] : 0

$31:a4f6 loadEnemy
	[in] u8 A : groupNo?
	[in] u8 Y : enemyIndex (not id)
	[in] u8 $7d6b.x : enemyIds

opt ext
$31:a65e useItem [battleFunction04]
	[in] u8 $1a : actionId (= itemid)

opt ext
$31:a732 decideEnemyAction [battleFunction02]
	[in,out] u8 $78b7 : special sequence
	[in] u8 $7be2 : some  flag (checked to do barrier-change)
	[in] u8 $7d6b : group to id map
	[in] u8 $7da7 : index to group map
	[in] u8 $7ed8 : battle mode ? (<0 = use specials sequencially)


$31:a8c8 get24_2C
	[in] BattleCharacter* $24
	[out] u8 a : $24[0x2c]

$31:a8e1 setEnemysTarget
	[in] BattleCharacter* $24 : pEnemy
	[in] u8 x : targetIndex

opt
$31:a91b decideEnemysActionTarget
	[in] u8 a : actionId
	行動パラメータを読み込んでその5バイト目にしたがって適切に対象を選択する

$31:a9f7 isValidTarget
	[in] u8 a : targetIndex
	[out] bool zero : (1:valid, 0:invalid(dead|stone|jumping) )
	

$31:aca2
	[in] u16 $57 : playerBasePtr ($6100)
	[in] u16 $59 : playerEquipBasePtr ($6200)
	[in] u16 $5b : battleParamBasePtr ($7575)

fix opt ext
$31:aa16 calcBattleParam
	[in] u16 $57 : playerBaseParam(=$6100)
	[in] u16 $59 : playerEquips(=$6200)
	[in] u16 $5b : playerBattleParam(=$7575)
	[in] u8 $52 : playerIndex
	属性ボーナスが適用されないのはこの関数が正しくフラグを設定しないせい
	ウインドウイレースバグが起きるのは誤ったタイミングとindexでこれを呼び出すせい
	装備メニューからも呼ばれる

$31:af63 addItemBonus
	[in] u8 A : bonusFlag
	[in,out] u8 $2c[5] : params

$31:af77 doSpecialAction [battleFunction00]
	[in] u16 $6e : actorPtr
	[in] u8 $cc : skipSealedCheck (item=1,although item flag directs to skip too)
	[in] u8 $7e99 : selected targets (actor.+2F)
	[out] u8 $7ec2 : effectHandlerType
	[out] u8 $7e88 : effectId ( usually = actionId)
	[out] u8 $7ec3 : effectFlag (set if actionId >= 0x5b)
	[out] u8 $7e9d : actionParam[6]
	[out] u16 $7e4f[16] : damages
	魔法・召還・地形・敵の技の効果を計算する
	回数と威力の計算を行った後魔法の種類ごとの処理に分岐

$31:b15f invokeActionHandler
	[in] u8 $7404 : handlerType (from actionParam[4])
	分裂=11

$31:b17c handleDamageMagic	//[specialHandler00]

$31:b233 handleHealingMagic	//[specialHandler01]

$31:b30c handleStatusMagic	//[specialHandler04]
	[in] u8 $7403 : actionParam[3]
	[out] u8 $54 : actionResultFlag

$31:b3f1 handleToadMinimum	// [specialHandler07]

$31:b49b handleErase	//イレース [specialHandler0B]

$31:b4d4 handleSegment	//分裂 [specialHandler11]

$31:b51f handleSuicidalExplosion //自爆

$31:b6dd calcHealAmount
	[in] u8 $7c : hitcount
	[in] u8 $7402 : actionParam[2]
	[out] u16 $78,79 : healAmount
	属性倍率を2、防御力を魔法防御、回避しないとしてダメージ計算した結果を返す

$31:b875 isTargetNotResistable
	[in] u8 a : status
	[out] bool carry : (1=not resisted)

$31:b8e7 calcMagicHitCountAndClearTargetIfMiss
	[in,out] u8 $7c : hit count

$31:b921 clearEffectTargetIfMiss
	[in] u8 $7c : hitCount
	[in,out] u8 $7e9b : targetBitToPlayEffect
	[in] u8 $7ec1 : targetIndex

$31:b926 clearEffectTarget
	[in] u8 $7ec1 : target index
	[in,out] u8 $7e9b : target bit

$31:b9ab segment //分裂
	[in] u8 $18 : segmenting enemy index
	[in] u8 $1c : index to generate enemy
	[out] BattleCharacter* $20 : pNewlyGeneratedEnemy


$31:bb28 getNumberOfRandomSuccess //getRandomSucceededCount
	[in] u8 $24 : number to try
	[in] u8 $25 : probability of success (%)
	[out] u8 $30 : count of success
	[out] u8 A : count of success

$31:bb44 calcDamage
	$1c,1d = ((($25*(1.0~1.5)*($27/2)+$28*$29)-$26)*$7c)/$2a
	[in] u16 $25,2b : attack power
	[in] u8 $26 : defence power
	[in] u8 $27 : attr multiplier
	[in] u8 $28 : additional damage (critical modifier)
	[in] u8 $29 : critical count(0/1)
	[in] u8 $2a : damage divider (count of target)
	[in] u8 $007c : damage multiplier (count of hit)
	[out] u16 $1c : final damage (0-9999)
	攻撃力に乱数をかけた上でダメージを計算する
	味方の同士討ちの場合防御は適用されない
	この処理に渡すパラメータを種類ごとの処理で調整がいいかもしれない

$31:bbe2 isTargetWeakToHoly
	[out] bool carry : 1=yes 0=no
	[out] u8 $27 : 2=yes 0=no

$31:bbf3 applyStatus
	[in] u8 $24 : status to apply
	[in,out] u8 $e0 : target side status cache
	[out] u8 $78d9 : status name id
	[out] u8 $78da[] : battle messages
	[out] u8 a : $70[0x2c]

$31:bc25 getTarget2C
	[in] BattleCharacter* $70 : pTarget
	[out] u8 a : $70[#2c]

$31:bcd2 damageHp
	[in] u16 $78 : damage
	[in] BattleCharacter* $24 : damage target
	[out] u8 $7573 : deathCounter?
	[out] bool carry : isTargetAlive

$31:bd24 healHp
	[in,out] u16 $78,79 : [in] healAmount [out] actuallyHealedAmount
	[in] BattleCharacter* $24 : heal target

fix opt
$31:bd67 spoilHp
	in:
		u16 $78,79 : damage
	out:
		u8 $26 : dead flag (00:both alive 01:target dead 81:actor dead)
		u8 $42 : undead flag

$31:bdaa shiftRightDamageBy2
	in,out:
		u16 $78,79 : damage

$31:bdb3 set24toActor
	[out] BattleCharacter* $24

$31:bdbc set24toTarget
	[out] BattleCharacter* $24

$31:bdc5 updateCacheAndHpIfDead
	[in] u8 A : sideToCheck (0=player 1=mob)?
	[in] BattleCharacter* $24
	[out] status $e0 : target side status cache
	[out] status $f0 : actor side status cache

$31:be14 checkStatusEffect
	[in] u8 $742c : physical evade
	[in] u8 $742e : status resist
	[in] u8 $7442 : hit
	[in] u8 $7444 : status to apply
	[in] u8 $7c : hit count

$31:be90 updatePlayerOffset
	[in] u8 $52 : iPlayer
	[out] u8 $5f : offset

$31:be98 setYtoOffsetOf
	[in] u8 a : memberOffsetToSet
	[in] u8 $5f : basePtr
	[out] u8 a,y : resultOffsetFromBasePtr

$31:be9d calcDataAddress //[battleFunction07]
	[in] u8 $18 size (in bytes)
	[in] u8 $1a index	
	[in] u16 $20 baseAddr 
	[out] u16 $1c dataAddr
	$1c = $20 + $18 * $1a

$31:bebf rebuildBackpackItems //[battleFunction08]
	[in,out] Item $60c0[32]
	戦闘中の並び( { id,count}[32] ) からフィールド用のならび( id[32] count[32] )に戻す

$31:bf53 checkWhetherToSegment	//分裂判定
	[in] u8 $7da7 : indexToIdMap
	[out] u8 $7ee1 : id of segmented enemy
	[out] u8 $78da : battleMessages, $78ee : messageCount
	使用技リストの1個目が#$4fの敵に
	暗黒属性以外の攻撃が1回以上命中した場合
	分裂処理を行う
	なお二刀流の場合は命中した手がどちらかによらず両手が暗黒でないと分裂する
=====================================================================================================
[bank 34-35]

$34:8000 { return battleLoop();	//$8074; }
$34:8003 { return $9ce3; }
$34:8006 { return $803d; }
$34:8009 { return $8043; }	//フィールドの装備メニューから呼ばれる
$34:800c { return strToTileArray(); //$966a; }
$34:800f { return loadString(); //$a609; }

$34:8012 dispatchBattleFunction_00
$34:8016 dispatchBattleFunction_01
$34:801a dispatchBattleFunction_02
$34:801e dispatchBattleFunction_03
$34:8022 dispatchBattleFunction_04
$34:8026 dispatchBattleFunction_05
$34:802a dispatchBattleFunction_06
$34:802e dispatchBattleFunction_07
$34:8032 dispatchBattleFunction_08
$34:8036 dispatchBattleFunction_09

$34:806c setCurrentPlayerPtrs
	[in] u8 a : player offset
	[out] $57 : = $6100
	[out] $59 : = $6200
	[out] $5b : = $7575
	[out] $5d : = $7675

$34:8074 battleLoop
	u8 $7ac2 : current ordinal
	戦闘処理の大元のループ
	敵か味方が全滅するか逃走成功するまで入力→行動を繰り返す

$34:8160 endBattle
	[in] u8 $78ba : beginning mode (80:enemy surprise attack 08:backattack)
	[out] u8 $78d3

$34:8185 presentCharacter

$34:8213 initBattleVars
	戦闘中の処理で使う変数を初期化(0,1,FFなど)する

$34:8306 updatePlayerBaseParams

$34:8374 beginBattlePhase
	[out] u8 $74 : count of escape

opt ext
$34:8411 playEffect
	[in] u8 $7e9a :	action side flag (80:actor enemy 40:target enemy)
	[in] u8 $7ec2 : effectType; set by commandHandler, usually commandId
	[in] u8 $7ec3 : (0 or 1?)
	func	addr	$7ec2
	00	8613	4,10	//たたかう うたう
	01	8577	13,14	//? アイテム/まほう
	02	85ed
	03	8576	0,1,a,b,c,d,e	//? ? ? しらべる みやぶる ぬすむ
	04	853b	2	//ぜんしん
	05	8540	3	//こうたい
	06	8528	5	//ぼうぎょ
	07	852d	8	//ジャンプ
	08	8516	9	//(着地)
	09	850a	f	//ためる
	0a	8505	11	//おどかす
	0b	84fb	12	//おうえん
	0c	84f6	15	//
	0d	84d7	6,7	//にげる とんずら
	0e	8470	16	//死亡エフェクト
	0f	8460	17	//ダメージ表示
	10	8555	18	//かえるアクション

opt
$34:8460 playEffect_0F
	[in] u8 $7ee1 : segmented enemy id (ff: none)

opt
$34:8470 playEffect_0e
	[in] u8 $7e9a : side flag

opt
$34:8496 buildEnemyDeadBits
	[in] u8 $7da7[8] : indexToGroup
	[in] u8 $7ec4[8] : enemyStatus

opt
$34:84d7 playEffect_0d

$34:84f6 playEffect_0c

$34:84fb playEffect_0b

$34:850a playEffect_09 //charge (command0F)
	[in] u8 $7e93 : effectFlag (1=ためすぎ 0=通常)

$34:8532 set52toActorIndexFromEffectBit

$34:853b playEffect_04

$34:8540 playEffect_05

$34:8545 dispatchPresentScene_1f

$34:8576 playEffect_03

$34:8577 playEffect_01 
	[in] u8 $7e88 : actionId
	[in] u8 $7e98 : actors char bit?
	[in] u8 $7e99 : selected targets ($6e[#2f])
	[in] u8 $7e9a :	effect side
	[in] u8 $7e9d : actionParam[6]; see $31:af77
	魔法などの効果を表示する処理を呼び出す

opt ext
$34:8613 playEffect_00	//[fight/sing]
	[in] u8 $7e6f : targetside (0 = player)
	[in] u8 $7e9a : effectSideFlags
	[in] u8 $7e9b : targetBit
	[in] u8 $bb,bc : hit count

$34:8689 doNothing_8689

$34:868a showDamage
	[in] u8 $7e9a : side flag
	[in] u16 $7e4f[8] : target damages
	[in] u16 $7e5f[8] : actor damages
	まず対象側のダメージを表示した後 攻撃側のダメージを表示する

$34:86ab getIndexFromEffectBit
	[in] u8 $7e98.x : target bit to play effect
	[in] u8 X : side
	[out] u8 Y : result index 

$34:88e1 setPlayerPtrs
	$57,58 = #6100;
	$59,5a = #6200;
	$5b,5c = #7575;
	$5d,5e = #7675;

$34:8902 loadCursorSprites
	[in] u8 $1a : destIndex (spriteIndex)
	[out] Sprite $0220[4] : cursor
	//uses:
	//	$891e(file:6892e) [4][4] = {
	//		F0 5A 03 F0  F0 59 03 F0
	//		F0 5C 03 F0  F0 5B 03 F0
	//	} : cursor sprites

$34:892e tileSprites2x2
	[in] u8 $1a : spriteIndex
	[in] u8 $1c : top
	[in] u8 $1d : right
	[out] u8 X : $1a << 4
	[out] Sprite $0220[4]

$34:8966 loadAndInitCursorPos
	[in] u8 $1a : destIndex (spriteIndex)
	[in] u8 $55 : cursorPositioningType
	[in] u16 $34:8afa(file:68b0a) : initCursorParamPtrs { right,top }
	[out] u8 $22,23,0050,0051 : 0
	[out] u8 $0220+(destIndex*4) : cursorSprites
	[out] u8 X : destOffset

$34:899e getInputAndUpdateCursorWithSound
	[in] u8 $1a : cursorId
	[in] u8 $1b : right-end (with this value not included)
	[in,out] u8 $22 : col
	[in,out] u8 $23 : row
	[out] u8 $50[$1a] : inputBits (only a,b,left,right;otherwise unchanged)
	各種入力ウインドウにおいて、パッド入力を取得し
	対応する動作を行う(十字キーなら音ともに移動・ABなら音を鳴らして戻る)

$34:89de getInputAndUpdateCursor_OnB

$34:89e6 getInputAndUpdateCursor_OnA

$34:89ee getInputAndUpdateCursor_OnUp

$34:8a82 getInputAndUpdateCursor_OnLeft

$34:8a9f getInputAndUpdateCursor_OnRight

$34:8abe getInputAndUpdateCursor_OnStartOrSelect

$34:8ac1 getInputAndUpdateCursor_end

$34:8acf getInputAndUpdateCursor_inputHandlers[8]

$34:8adf clearSprites2x2
	[in] u8 $18 : sprite index
	[out] Sprite $0220[4] : filled with 0xf0

opt
$34:8b38 draw4LineWindow
	[in] u8 $18 : left (border incl)
	[in] u8 $19 : right (border incl)
	[in] u8 $1a : behavior[xxxxxxba] (a:put left-border,b:put right-border)
	[in] Tile* $7ac0

del
$34:8c56 putWindowSideBorderTile
	[in,out] u8 $1b : side (1:left 0:right)  (toggled on each call)

del
$34:8c84 putWindowTopBottomBorderTile
	[in] u8 $1a : behavior [xxxxxxba] (a:put left-corner b:put right-corner)
	[in,out] u8 $1e : vertical-side (1:top 0:bottom) ; toggled on each call
	[in,out] u16 $2a : vramAddr
	[in,out] u16 $2c : vramAddrFor2ndBG
	[in] u8 $78b8 : width (without border)
	[in] u8 $78b9 : extraWidth

del
$34:8d03 setBackgroundProperty

$34:8d1b draw1LineWindow
	[in] u8 A : windowId
	[in] Draw1LineWindowParam* $8e33
	[in] Tile* $7ac0

$34:8de5 drawBorder
	[in] u8 $78b8 : midCharLength
	[in] u8 $1a : leftMostChar
	[in] u8 $1b : middleChar
	[in] u8 $1d : rightMostChar
	[in,out] u16 $60,61 : vramAddr (32bytes/row)

$34:8eb0 eraseWindow
	下から1行/1フレームで消していく

opt
$34:8f0b eraseFromLeftBottom0Bx0A	//[eraseItemWindowColumn]

$34:8f57 getSortedIndex
	[in] u8 $1a : base?
	[in] ptr $1c : keys
	[in] ptr $1e : result indices
	[in] u8 $22 : len

$34:8f6f sort
	[in] u8 a : end
	[in] u8 $1a : begin
	[in] ptr $1c : keys
	[in] ptr $1e : values
	u8 $18 : begin
	u8 $19 : end
	u8 $1a : firstLesserKeyIndexInFront
	u8 $1b : firstGreaterKeyIndexInBack
	u8 $20 : pivot (key of begin)

opt ext
$34:8ff7 presentBattle
	[in] u8 $7ec2 : set by commandHandler; usually commandId
	[in] u8 $78d5 : battle process type
	uses:
	CommandList* $950d[0x5]
	PresentHandler $954d[0x10]
	commands:
	04,02,01,00 : closeWindow
	03 : closeMessageWindow or back
	05 : showActorName
	06 : showActionName (ex.3かいヒット)
	07 : showTargetName	(ex.ぜんたい)
	08 : showEffectMessage (ex.めがみえる!)
	09 : showMessage	(ex.からだがじょじょにせきかする)
	0a : waitForAButtonDown
	0b : effectOnTarget?
	0c : damage
	0d : dyingEffect?
	0e : updateStatus
	processTypeに対応するコマンドのリストを取得し順番にコマンドを実行する

opt
$34:905b showActorName //pb_05
	[in] u16 $57 : playerPtr
	[in] u8 $78d6 : charIndex
	[in] u8 $7ecd[] : enemy group id?
	[in] u8 $7d6b[4] : enemy ids

opt ext
$34:90a0 showActionName //pb_06
	[in] u8 $72 : isEquipmentUsed
	[in] u8 $78d7 : messageId (#ff : no display,#80> : specialAction)

del
$34:9177 showTargetName //pb_07
//	[in] u16 $57 : playerPtr
	[in] u8 $78d8 : targetCharIndex
	[in] u8 $7ecd[] : enemy group id?
	[in] u8 $7d6b[4] : enemy ids?

$34:91ce setNoTargetMessage

opt
$34:91d4 showEffectMessage //pb_08
	[in] u8 $78d9 : effect id (#ff = display nothing)

opt
$34:91fe showInfoMessage //pb_09
	[in] u8 $78da.x : message queue (#ff = display nothing)
	[in] u16 $78e4.x : message params
	[in] u8 $78ee : message count
	[in] u8 $78ef : message param index
	[in] u8 $9575 : process type (4bit data)
	メッセージidにより5種類の処理に分岐する

opt
$34:923c showInfoMessage_00

del
$34:9245 loadInfoMessage

del
$34:9253 drawInfoMessageWindow

opt
$34:925f showInfoMessage_01
	表示してからAボタンが入力されるのを待つ

opt
$34:926b waitPad1ADown

opt
$34:9275 showInfoMessage_02
	HP表示(ライブラ・しらべる)

opt
$34:92b5 printHp
	[in] string $7ad7
	[in] u8 $24 : offset
	[in] $78e4 : messageParams
	[in] u8 $78ef : messageParamIndex
	指定の位置から16bit値を取り出して文字列としてコピーする

opt
$34:92db showInfoMessage_03
	[in] $78e4 : messageParams
	[in] u8 $78ef : messageParamIndex
	%u%s
	指定の位置から16bit値を取り出してメッセージの先頭につけて表示する
	(ex. 12000EXPかくとく)

opt
$34:932b showInfoMessage_04
	おたから: xxxxxx

opt
$34:934e playActionEffect //pb_0b
	$8411を呼び出す

opt
$34:9354 playDamageEffect //pb_0c
	ダメージ表示

opt
$34:935f playDyingEffect	//pb_0d
	[in] u8 $78d3 : ?
	ステータスキャッシュを元に攻撃側と防御側のステータスを更新し
	死亡エフェクト表示処理を呼び出す

opt
$34:93c4 updateEnemyStatusCache	//pb_0e
	防御側が敵であるとみなしてステータスキャッシュを更新する

opt
$34:93cd updatePlayerStatus
	[in] StatusCache* $18 : pCache

opt
$34:9408 updateEnemyStatus
	[in] StatusCache* $18 : pCache
	[out] u8 $7ec4[8] : status

opt
$34:9450 waitForAButtonDownOrMessageTimeOut //pb_0a
	[in] u8 $6010 : message speed?
	$6010*8フレーム経過するかAボタンが押されるのを待つ

opt
$34:94d6 closeWindow	//pb_00 pb_01 pb_02 pb_04
	[in] u8 $4b : currentCommandId
	現在のコマンド番号に対応するウインドウを消す
	00:行動者 01:行動名 02:効果対象 03:追加効果 04:メッセージ

opt
$34:94e7 loopUntilMessageEmpty //pb_03
	[in] u8 $78da : battle messages
	[in] u8 $78ee : message index
	[out] u8 $64 : command index
	キューにまだ表示すべきメッセージがあるなら
	メッセージ表示コマンド(=09)の位置まで現在位置($64)を戻す
	なければメッセージ用ウインドウ(左下の奴)を消す


$34:95bd set18To8a40

$34:95c6 set18To8c40

$34:95cf set18To00e0

$34:95d8 set18To00f0

$34:95e1 itoa_16
	[in]	u16 $18 : value
	[out]	Tile $1a[5] : tileArray (higher digit first)

$34:9648 countAndDecrementUntil0
	[in] u16 $20 : decrementBy

opt
$34:966a strToTileArray
	[in] u8 $18 : cchLine
	[in] Tile* $4e : destCharPtr
	[in] string $7ad7 : string (zero terminated)
	文字列をタイル番号の配列に変換する(濁点、半濁点、改行などを処理)

del
$34:96f9 putDakuten	//Voiced consonant mark

del
$34:9707 putHandakuten	//P-sound mark

del
$34:9715 getPrevLinePtr
	[in] Tile* $4e : currentLine
	[out] Tile* $1e : prevLine

del
$34:9735 strToTileArray_OnLinefeed

del
$34:9745 strToTileArray_OnTab	//char 02

opt
$34:9754 initTileArrayStorage
	[out] Tile* $4e,$7ac0 : = $7200

$34:9777 calcActionOrder
	[out] u8 $7acb[#c+1] : ordered indices (#ff:last)
	行動順を決める
	まず乱数を12個生成しその大きい順にindexを並び替える
	次にプレイヤーキャラのagiを乱数により1~3倍し大きい順にindexを並び替える
	12個の乱数値のうちindex9-12のある場所をプレイヤーキャラの大きかった順に埋めていく

opt ext
$34:986c getCommandInput
	[in] u8 $52 : playerIndex
	[in] u8 $7ed8 : battleMode (20:invincible)
	[in] u8 $7be1 : ?
	[out] u8 $78cf[4] : actionId
	プレイヤーの入力を受け付け行動idを決定する

$34:9a42 rewindPlayerIndex

$34:9a68 commandWindow_OnCommand_00_01_09_0a_13
	//未使用command

$34:9a69 createCommandWindow
	[in] u8 $5f : playerOffset
	[in] u8 $78ba : begginingFlag (surpriseAttack/backAttack)
	[out] u8 $7400[6] : commandIdList (index=cursor pos)
	指定のプレイヤーのジョブを元にコマンド番号を取得し
	それをもとに選択ウインドウを描画する

$34:9ae7 putCanceledItem
	キャンセルしたコマンドがアイテムなら使ったアイテムを戻す

$34:9b79 requestSoundEffect_18
	[out] u8 $c9 : isSoundEffectRequested
	[out] u8 $ca : id of sound effect to be played on next irq
	次のIRQでカーソル移動音(18)を鳴らすように設定する

$34:9b7d requestSoundEffect_05
	決定音

$34:9b81 requestSoundEffect_06
	選択が不正なときの音

$34:9b88 setYtoOffsetOf
	y = $5f + a

$34:9b8d setYtoOffset03
	y = $5f + 3

$34:9b94 setYtoOffset2F
	y = $5f + 0x2f

$34:9b9b setYtoOffset2E
	y = $5f + 0x2e

opt ext
$34:9ba2 drawInfoWindow
	[in] u8 $7ceb : ?

$34:9d1d cachePlayerStatus

$34:9d9e drawEnemyNamesWindow
	[in] u8 $7dce[4] : group id
	[in] u8 $7d6b[4] : enemy id

opt ext
$34:9de4 executeAction
	[in] u8 $7ac2 : ordinal
	[in] u8 $7acb[0xc+1] : ordinalToBattleCharIndexMap
	[in] u8 $7ca7[4] : 選択魔法Lv (index=player)
	[in] u8 $7ced,7cee : ?
	行動順が回ってきたキャラの選択した行動の計算処理を実行する
	エフェクトのパラメータ設定もここで行う

$34:9f7b setActionIdAndClearMode

$34:9f87 setActionTargetToSelf

$34:9fa8 command_none	//00,0a
	[in,out] u8 $7ceb : ?

opt
$34:9fd6 executeAction_summon
	[out] u8 $7e93 : effectFlag
	[out] u8 $7acb[$7ac2] : = #88
	[out] u8 $7e94 : ?
	召還キャラを生成する

opt ext
$35:a104 command_fight
	[out] u8 $7e1f[2] : itemid of weapon
	[out] u8 $7edf : protecting  bit
	[out] u8 $7ee0 : protection target bit
	かばう処理、死亡メッセージの設定、矢・手裏剣の消費を行う
	ダメージ計算はdoFight($30:9e8a)にやらせる

opt
$35:a30f getIndexOfGreatest
	[in] u16 $1a[4] : values
	[in] u8 $24[8] : associated indices
	[out] u8 $52 : index
	[out] u8 x : index
	[out] u8 $5f : offset to player of result index 
	//logic:
	//	for (var i = 1;i < 4;i++) {
	//		var val = values[i];
	//		if ( val > values[0] ) {
	//			values[i] = values[0];
	//			values[0] = val;
	//			var index = indices[i];
	//			indices[i] = indices[0];
	//			indices[0] = index;
	//		}
	//	}


$35:a353 consumeEquippedItem
	[in] u8 A : hand (right=4, left=6)
	[in] ptr $59 : equips
	[out] u8 $24 : recalcRequired (consumed item amount reached 0)

$35:a367 command_magic
	[in] u8 $1a : actionId
	魔法の前処理を行う ダメージ等はdoSpecial($31:af77) がやる


35:a3bb command_item
	[in] u8 $1a : actionId
	アイテムの前処理を行う ダメージ等はuseItem($31:a65e) がやる

$35:a42e getActor2C

$35:a433 endInputCommand

$35:a458 canPlayerPartyContinueFighting
	[out] u8 $78d3 : 80=all dead, 40=($7dd2 == 0)

$35:a50b fireCannon
	大砲の援護射撃

$35:a541 updatePlayerOffset
	[in] u8 $52 : playerIndexs
	[out] u8 $5f : offset
	[out] u8 A : offset

$35:a549 initString

$35:a558 offsetTilePtr
	[in,out] Tile* $4e

$35:a564 getSys1Random(
	[in] u8 A : max )
	系列1から乱数を取得する

$35:a56f modifyActionMessage?
	[in] u8 $7e88 : (invokedActionId)
	[in] u8 $35:a5fd : hasActionMessage (bit array,higher bit = lower id)
	[in] u8 $54 : action result flag (fight/special = 0)
	//$54 msg
	1  #45 "アンデットにダメージ!"
	2  #01 "まほうをきゅうしゅうした!"
	!0 #4f "しっぱい!"

opt
$35:a609 loadString
	[in] u16 $18 : tableBase
	[in] u8 a : index
	[in,out] u8 x : destOffset
	[out] string $7ad7+x
	テーブルに入ってる値は$18:0000(file30000)からのリニアな16bitオフセット
	対象のデータがあるbankを常に$8000-$bfffにマップする

opt
$35:a71c commandWindow_OnForward //ぜんしん(02)

opt
$35:a750 commandWindow_OnBack //03

opt
$35:a784 showArrowAndDecideCommand
	[in] u8 $78ba : beginning flag

opt
$35:a7c8 movePosition_end

opt
$35:a7cd initMoveArrowSprite

opt
$35:a7df command_forward //02:ぜんしん

opt
$35:a7ea command_back //03:こうたい

opt
$35:a816 getInvertedLineFlag

opt
$35:a843 commandWindow_OnFight //04:たたかう

opt
$35:a848 commandWindow_selectSingleTargetAndGoNext

opt
$35:a877 commandWindow_OnGuard //05:ぼうぎょ

opt
$35:a881 command_guard
	[out] u8 $7ce4 : def

opt
$35:a8ab commandWindow_OnEscape //06:にげる

opt
$35:a8b5 commandWindow_OnSneakAway //07:とんずら

opt
$35:a8bf command_escape //06

opt
$35:a93b command_sneakAway

opt
$35:a9ab commandWindow_OnJump

opt
$35:a9d8 command_jump

opt
$35:aa11 command_09 //landing

opt
$35:aa22 commandWindow_OnGeomance //0b:ちけい

opt
$35:aa56 getCommandInput_goNextCharacter

opt
$35:aa5d command_geomance

opt
$35:aac3 getCurrentTerrain
	[in] u8 $7ce3 : terrain

opt
$35:ab06 geomanceTargetFlag = $7a	//???

opt
$35:ab07 commandWindow_OnDetect //0d:みやぶる

opt
$35:ab0c command_detect

opt
$35:ab66 setEffectHandlerTo18
	[out] u8 $7ec2 : effectHandlerIndex
	[out] u8 $cc : prevent cast motion

opt
$35:ab6e commandWindow_OnInspect //0c:しらべる

opt
$35:ab73 command_inspect
	[out] u16 $78e4[2] : hp,maxhp

opt
$35:ab9f commandWindow_OnSteal	//0E:ぬすむ

opt
$35:aba4 command_steal

opt
$35:ac65 commandWindow_OnCharge//ためる(0F)

opt
$35:ac6f command_charge //0F

opt
$35:acd0 commandWindow_OnSing	//10:うたう

opt
$35:acd5 command_sing

opt
$35:ad0c commandWindow_OnIntimidate	//11:おどかす

opt
$35:ad16 command_intimidate

opt
$35:ad6b commandWindow_OnCheer	//12:おうえん

opt
$35:ad75 command_cheer
	右手攻撃力+10

opt
$35:adaf commandWindow_OnItem //14:

fix opt ext
$35:af4c itemWindow_OnAButton
	[in,out] u8 $1d : cursor.x
	[in,out] u8 $52 : currentPlayerIndex
	[in] ptr $59 : pEquips
	[in] BattleCharacter* $5e : pPlayer
	[in] u8 $62,63 : currentSelection {row,col}
	[in,out] u8 $67 : mode
	[in,out] u8 $68,69 : lastSelection {row,col}
	[in] u8 $7af5[2][0x20+4] : items {id,count}
	[in] u8 $7b3d[0x20+4] : isEquipmentForHand?

opt fix
$35:b198 itemWindow_OnB
	[in,out] u8 $67 : mode (0 = 1st,1=2nd selection)

opt fix
$35:b1b0 endItemWindow

opt
$35:b1d8 getTileArrayOfItemNameCount
	[in] u8 $34[2][4] : items
	[in] Tile* $4e : pItemNameCount

opt fix
$35:b242 isHandFreeForItem
	[in] itemid $3e : toRemove
	[in] itemid $40 : toEquip
	[in] itemid $7af5 : righthand
	[in] itemid $7af9 : lefthand
	[out] bool carry : 0:ok 1:bad combination
	//	外そうとしている手の逆に着けてるものと着けようとしている物の組み合わせを調べる
	//	素手	片手	竪琴	弓	矢	盾	防具その他
	//(id)	00	01-45	46-49	4a-4e	4f-57	58-61	(62-)
	//00	o	o	o	o	o	o
	//01-45 	o	x	x	x	o
	//46-49 		x	x	x	x
	//4a-4e 			x	o	x
	//4f-57 				x	x
	//58-64						o

opt ext
$35:b2a7 itemWindow_scrollRight
	[in,out] u8 $65 : background no
	[in,out] u8 $66 : left(colIndex,0-7)
	[in] u8 $69 : col index of 1st selection (if avail)
	[in] u8 $67 : mode

opt ext
$35:b362 itemWindow_scrollLeft
	[in,out] u8 $10 : windowX
	[in,out] u8 $65 : background no
	[in,out] u8 $66 : left(colIndex,0-7)
	[in] u8 $69 : col index of 1st selection (if avail)
	[in] u8 $67 : mode

opt
$35:b419 drawEquipWindow
	[in] u16 $59 : ptrToEquips ($6200)
	[in] bool $7573 : eraseFlag 

opt
$35:b48b createTileArrayForItemWindowColumn()
	[in,out] u8 $3d : firstItemOffset, incremented by 8 per call

opt
$35:b4d4 itemWindow_moveCursor
	u8 $62 : cursor row index (0-3)
	u8 $63 : cursor col index (0-7)

opt
$35:b4f7 itemWindow_OnUse

opt
$35:b5f9 drawEquipWindowNoErase

del
$35:b601 redrawColumn

$35:b636: windowInitParams[8]

opt
$35:b646 commandWindow_OnMagic
	[in] u8 $7ed8 : battle mode 
	(battleMode & 0x40) != 0 だとbeep音とともに終了するようになっている
	魔法禁止モードが存在する？
opt
$35:b7f9 magicWindow_OnUp

opt
$35:b82a magicWindow_OnDown

opt
$35:b863 magicWindow_OnLeft

opt
$35:b86c magicWindow_OnRight

opt
$35:b874 magicWindow_OnSelectOrStart

opt
$35:b877 magicWindow_OnA
	[in] u8 $24 : col
	[in] u8 $26 : row
	[in] actionid $7400[24] : magics

opt
$35:b8ee magicWindow_OnB

opt
$35:b8fd isPlayerAllowedToUseItem
	[in] u8 $18 : itemid
	[in] u16 $20 : ? itemDataBase = #$9400
	[out] u8 $1c : allowed (1:ok 0:not)
	[out] u8 $7478[8] : itemParams

del
$35:b93e flagJob

opt
$35:b953 setMagicTarget

$35:b979 setItemEffectTarget
	[in] u8 $7478[8] : itemparam

$35:ba2a commandWindow_OnMagic_inputHandlers[8] = {
	77 B8 EE B8 74 B8 74 B8 F9 B7 2A B8 63 B8 6C B8
}

$35:ba3a copyTo7400FromBank30
	[in] $1a : size (in bytes)
	[in] $18 : index 
	[in] x : dest offset

fix
$35:bb49 winPrize
	[in] PlayerCharacter* $57 : (=$6100)
	[in] BattleCharacter* $5b : (=$7575)
	[in] u8 $78f0[4][4] : playerActionCounts
	[in] u8 $7d6b[4] : enemy ids
	[in] u8 $7dd3[4] : killCounts?
	[out] u8 $7571 : droppedItemCount
	[out] u8 $7434[30h] : droppedItems
	戦利品(exp,gil,おたから) 獲得
	行動経験値が基準値(=100)を越えたら熟練度Up
	expが基準値を超えたらLvUpし成長処理も行う

$35:bf7c lvupParams
	[in] u8 A: lvupInfoBits
	[in] PlayerCharacter* $57 
	[in] u8 $5f : offset

fix
$35:bfb3 incrementItem
	[in] u8 a : itemid
	[out] bool carry : succeeded (1)
	指定されたidをもつitemの数を1個増やす
	同じidのitemがなければ空欄を見つけてそこに置く
	もしみつからなければcarryをクリアして戻る
	同じidがありかつ99個以上の場合offsetを1つ後ろにずらしたまま
	空欄(0)を探すので本来item32個分で終わるはずの検索も
	(60c0-61bfの奇数アドレスのどれかが0になるまで)終わらず
	0だったアドレスの次の値が1増える
	(item欄ならitemid,最後のitemなら先頭のキャラのjob)

======================================================================================================
[bank 3e-3f]

fix
$3f:e1dc dungeon::main
	ダンジョンマップの大元
	スタックポインタが20h未満でない限り「降りる」ごとに再帰呼び出しされる

$3f:f38a getLastValidJobId
	[in] u8 $6021 : crystal flag
	[out] u8 a : last valid job id
	称号取得フラグを元に有効なジョブIDの最大値を返す(返される値は有効に含まれる)
	ジョブメニューを表示するときに呼ばれる

$3f:f854 call_32_8000
	[in] u8 a,x : param
	[in] u8 $7cf6 : currentBank (bankToRestore)


$3f:f8aa setDmaSourceAddrTo0200

$3f:f8b0 updatePpuDmaScrollSyncNmiEx

$3f:f8c5 updatePpuDmaScrollSyncNmi

$3f:f8cb updatePpuScrollNoWait
	[in] $06 : ppu ctrl1
	[in] $09 : ppu ctrl2
	[in] $0c : vram addr1 (bg.scroll.x)
	[in] $0d : vram addr1 (bg.scroll.y)


$3f:f8e0 setVramAddr {
	[in] u8 a : vram addr(high byte)
	[in] u8 x : vram addr(low byte)


$3f:f8ea mul8x8_reg
	[in] u8 a : multicand
	[in] u8 x : multiplier
	[out] u16 a,x : result

$3f:f8f2 offset$7e_16

$3f:f8fe offset$80_16

$3f:f92f memcpy
	[in] u16 $7e : sourceAddr
	[in] u16 $80 : destAddr
	[in] u8 $82 : len
	[in] u8 $84 : sourceBank (per16k)
	[in] u8 $7cf6 : currentBank (bankToRestore)
	[out] u8 $82 : 0

$3f:f969 copyToVramDirect

$3f:f970 copyToVram
	[in] u16 $7e : sourceBuffer
	[in] u16 $80 : destVramAddr
	[in] u8 $82 : [aaaaaabb] a:len(per 40h bytes)  b:?
	[in] u8 $84 : sourceBank(per16k)
	[in] u8 $92 : indirectFlag? 
	[in] u8 $7300[] : tileRef (used if $92 != 0)

$3f:fa0e call_2e_9d53
	[in] u8 A : 9d53_param
	notes:
	各種ゲームシーン表示系のルーチンから呼ばれる

$3f:fa1d blackOutScreen 

$3f:fa26 doBattle
//	[in] a : encounter id
//	[in] x : ?
//	[in] y : battleMode
//	least value of S = $1a = $20 - 6

$3f:fadd setIrqHandlerAndNmiHandler

$3f:faf2 callSoundDriver
	[in] u8 $c9 : isSoundEffectRequested
	[in] u8 $ca : soundEffectId

$3f:fb17 saveFieldVars
	[in] u8 $0000[0xd0]
	[out] u8 $7480[0xd0]
	[in] u8 $00e0[0x20]
	[out] u8 $7470[0x20]

$3f:fb30 irq_handler	//[in battle]
	[in] u8 $a9 : isBankSwitching
	[in] u8 $08 : ppu ctrl1
	[in] u8 $10 : bg.scroll.x
	[in] u8 $11 : bg.scroll.y

$3f:fb57 nmi_handler
	[in] u8 $7cf3 : ?
	[in] u8 $01 : enable irq 
	[in] u8 $03 : => $02
	[out] u8 $05 : nmi_flag(=0)

$3f:fb80 waitNmi
	$05 をインクリメントした上で0になるのを待つ

$3f:fb87 switchFirst2Banks()
	[in] u8 a : per16kBank
	[out] u8 $ab : switchedBankNo
	[out] u8 $a9 : lock? (コマンド発行中のみincr)


$3f:fbaa getPad1Input()
	[in] u8 $13 : inputMask?
	[out] u8 $12 : inputFlag(bit7 > < v ^ st sel b a bit0)
	[out] u8 $14 : ?


$3f:fbef getBattleRandom
	[in] u8 A : max?
	[in] u8 X : min?
	[in] u8 $21 : randSystemIndex?
	[out] u8 A : rand  [x-a] の乱数値 上限も含む
	指定した乱数系列を使って乱数値を一つ取得する
	上位8bitを$21で指定した系列から取得した乱数(0x00-0xFF),下位8bitを0x80とした16bit値(A)と
	最大と最小の差分(8bit)(B)を掛けて
	結果のbit16-23の8bitを乱数の基本値として採用する
	結果のbit8-15=(diff*baseRand + diff>>1)が0x80以上で繰り上げ(小数部256/512以上で繰り上げ)
	 => (diff*(0x00~0xFF)/256 + diff/512) = diff*(1/512 ~ 511/512)
	繰上げの処理により最小値と最大値だけ出る確率が他の約半分(中央二人が狙われやすいのもそのせい)

$3f:fc27 initBattleRandom
	[out] u8 $7be3[0x100] : generated random numbers
	漸化式 r[n+1] = (a * r[n] + 0) % 0x400 によって乱数列を生成する
	aは RAM00-FFの値を全て足し合わせた値の下から2bit目と3の和 (つまり3か5)
	//$fc34 29 02	and #$02
	//$fc36 18	clc
	//$fc37 69 03	adc #$03	//#3(FC版オリジナル)だとドロップテーブル3番までしか落とさない
	//$fc39 85 22	sta $22

$3f:fc92 div16
	筆算的に割り算
	[in] u16 $18 dividend
	[in] u16 $1a divisor
	[out] u16 $1c quotient (result)
	[out] u16 $1e modulo (remainder)

$3f:fcd6 mul8x8
	筆算的掛け算(8bit*8bit)
	[in] u8 a : multicand
	[in] u8 x : multiplier
	[out] u16 $1a : product

$3f:fcf5 mul16x16
	筆算の要領で掛け算をする(16bit*16bit)
	[in] u16 $18 multicand
	[in] u16 $1a multiplier
	[out] u32 $1c-1f = $18 * $1a

$3f:fd20 setTargetBit
	[in] u8 x : target index
	(7-x) bit目をsetする

$3f:fd2c clearTargetBit
	[in] u8 x : target index
	(7-x) bit目をclearする

$3f:fd38 maskTargetBit
	[in] u8 x : target index
	(7-x) bit目とandを取る

$3f:fd3c shiftLeftN {
	a <<= 1;
$fd3d	a <<= 1;
$fd3e	a <<= 1;
$fd3f	a <<= 1;
$fd40	a <<= 1;
$fd41	a <<= 1;
}

$3f:fd43 shiftRightN {
	a >>= 1;
$fd44	a >>= 1;
$fd45	a >>= 1;
$fd46	a >>= 1;
$fd47	a >>= 1;
$fd48	a >>= 1;
}

$3f:fd4a copyString
	[in] u8 A : sourceBank(per16k)
	[in,out] u8 X : destOffset
	[in] u16 $18 : src
	[out] u8 $7ad7[] : string (0-terminated)
	[out] u8 Y : len

$3f:fd60 get2byteAtBank18
	[in] u16 $18 : baseOffset
	[in] u8 $1a : index
	[out] u16 $18 : 2byte-value

$3f:fd8b getUserFlags
	[in] x : userTypeId (itemParam[7])
	[out] $3b,3c,3d : $00:8900,x
	装備/使用 可能ジョブのフラグを取得する

$3f:fda6 copyTo7400Ex
	[in] u8 $18 : index
	[in] u8 $1a : dataSize
	[in] u16 $20 : baseAddr //-> $fcf5
	[in] u8 A : bankNo(per 16k unit)
	[in] u8 X : destOffset
	[in] u8 Y : bankToRestore
	[out sizeis($1a)] $7400.x loadedParam

$3f:fddc copyTo7400
	[in] u16 $46 : sourceBasePtr
	[in] u8 $4a : bankToRestore
	[in] u8 $4b : dataSize
	[in] u8 A : sourceBank (per16k)
	[out sizeis($4b) ] $7400 : destination

$3f:fdf3 call_bank30_9e58()
	[in] u8 $4c : functionId
	$30:9e58 = invokeBattleFunction

$3f:ff00 waitNmiBySetHandler

$3f:ff03 switchFirst2Banks_thunk

$3f:ff06 call_switch1stBank

$3f:ff0c switch1stBank

$3f:ff17 switchFirst2Banks
	[in] u8 a : basebank (per 8k)

$3f:ff2a nmi_handler_01
	ハンドラをRTIのみにした後戻りアドレスをポップして直接戻る

$3f:ff36 setNmiHandlerTo_ff2a_andWaitNmi
	nmiハンドラを$ff2aに設定する

$3f:ff45 {
	for (;;) {} //jmp $ff45
}