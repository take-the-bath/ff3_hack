rev96 //encoding: utf-8
*フィールド -----------------------------------------------------------------------------------------------
	[ワープ]
	浮遊大陸と下の世界で解釈が変わる
	「進む」時だけ指定する
	「戻る」は単に以前居た場所に戻る

	地上:
	b4:インビンシブル
	b5:古代民の迷宮(南側)
	f0:エウレカ7F
	f1:エウレカショップ
	f2:ドーガのむら
	f3-ff:石の中に居る

	[フロア処理]
	マップは32x32キャラ分で全て埋めないとだめっぽい(sram:$7400-77FFを全て埋めるまで読み込んでいる)
	マップデータはチップ番号の配列、最上位bitが連長圧縮フラグで立っている場合は
	次の1バイトで長さをあらわす(00hは256とみなされる)
	チップID60-63,70-7cは特別扱いで読み込み時、動的にチップIDを80-にマッピングする
	動的に割り当てられる80以降に使用する画像は00-7F用のものをマッピングして使う
	マッピングの定義は$3a:93c1(753c1) yy:マップ先ID-80 -> xx:ソースID
	
	66:脱出A
	67:脱出B
	78-7B:	こんなところにxxが! (同IDには4つまで)
	7C:宝箱:
		左上から配置された順にチップID:D0-に割り当て
		カテゴリーは04 (chipID:64-6F,7D-7Fと同じ)で
		イベントパラメータはカテゴリー04に属するチップの中で現れた順序
		パラメータをindexにして$0710-$071fに読み込まれている拾得物IDを取得
		$6040以降の未拾得フラグ(1=未拾得 0=拾得済)をテスト、拾得済みなら7Dに変更
		仕様上同一のmapに16個までしか置けない
		ワープ定義2byte目5bit目で箱の中身をギルかアイテムか選択(1=ギル)
		$03c00から1バイトずつで拾得物パラメータ、アイテムならアイテムID
		ギルの場合は更にそれをindexにして$03e00から2バイトずつで
		取得ギル(＝そのIDを持つアイテムの値段)
		箱の中身がアイテムかつ拾得物ID>=E0の場合はエンカウント、エンカウントIDは
		拾得物IDをそのまま使う(=E0-FF)
	7d:空箱

	チップIDマッピング ($753c1):
	パレット・属性・使用タイル(画像) 全てこれに依存
	80: 70 70 70 70 70 70 70 70 70 70 70 70 70 70 70 70
	90: 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71 71
	a0: 72 72 72 72 72 72 72 72 72 72 72 72 72 72 72 72
	b0: 73 73 73 73 73 73 73 73 73 73 73 73 73 73 73 73
	c0: 74 74 74 74 75 75 75 75 76 76 76 76 77 77 77 77
	d0: 7C 7C 7C 7C 7C 7C 7C 7C 7C 7C 7C 7C 7C 7C 7C 7C
	e0: 78 78 78 78 79 79 79 79 7A 7A 7A 7A 7B 7B 7B 7B
	f0: 60 60 60 60 61 61 61 61 62 62 62 62 63 63 63 63

	[フィールド処理]
	$7000-7EFFに横256x縦15マス分のチップデータを読み込む
	縦に移動する(y座標がかわる)たびに適当な位置に1行分更新する

	$0400-04FF:イベントデータ(各2バイト,index = chipId)
	$0500-06FF:チップとタイルの対応定義(index = chipId,struct of array)
	$0700-077F:チップのパレットID(index = chipId)
	チップID 00-3Fは全てのマップで共通
	40-7Fが各マップごとに固有

	下の世界/chipID 76:
		洞窟入口、イベント=闇の世界へ入る (オリジナル未使用)
		/chipID 7a:
		難破船、イベント=難破船に入る (大陸浮上後未使用)

	[チップ用タイルデータ]
	地上
		/共通: $0a:8c00 (14c00) 800h bytes
		/浮遊大陸: $0a:9400 (15400) 800h bytes
		/下の世界: $0a:9c00 (15c00) 800h bytes

	ダンジョン:
		$00:8c00 (00c00) ワープID→タイルセット
		$00:8e00 (00e00) タイルセット
		//tileCount for each index: x = $3e:df00.x;
		$03:8000 (06000) タイル用パターンオフセット

struct SpriteBuilderEntry { //2bytes
	u8 tileIndex;
	u8 palette : 2;
	u8 unk : 4;
	u8 flipHorizontal : 1;
	u8 flipVertical : 1;
};
union SpriteBuilder { 
	struct {
		SpriteBuilderEntry leftTop,leftBottom,rightTop,rightBottom;
	};
	SpriteBuilderEntry entries[4];
};
struct RuntimeObject //@$7000 ,16bytes
{
	u8 scriptId?; //$6080-のフラグがクリアなら0,otherwise =spriteId
	u8 = objectParam.attr & 0xF0
	u8 x,y,x,y;
	u8 unk[4];
	u8 spriteId; //+0a
	u8 unk[3];
	bank_ptr<0x3b,SpriteBuilder> pSpriteBuilder; //
};

struct RuntimeObjectInfo2nd //@ $7100,16bytes
{
	u8 chipAttrOfPos; //=$0400.chipIdOfPos & #37;
	u8 chipAttrOfPos; //same
	u8 = 01:9e00[world][objectId] & #0f;
	u8 = 01:9e00[world][objectId] >> 4;
	+06 u8 chipLayer; //attr & #03
};

struct ObjectEvent //$2c:8600
{
	u8 eventId; //f0 = talk
	u8 eventParam;
};

struct EventCondition {
	u8 flagIndex : 7;
	u8 testForSet : 1;
};

ConditionalEvent {
	EventCondition conds[var]; //variable FF-terminated list
	u8 eventParamId;
};

@@

ex.) 
フラグは$6020から1bitごと(進行状況と連動してると思われる)
各条件におけるフラグは全てを満たす必要がある(=AND)
ORを実現する場合は使用パラメータが同じで別条件のものを並べればよさそうだ
{
	{ 01 03 FF 02}		//flag 01,03が clear なら イベントパラメータ02を使用
	{ 02 85 07 FF 04}	//flag 02,07が clearで 05がsetなら イベントパラメータ04を使用
	{ FF 03 }		//条件なしで イベントパラメータ03を使用
}

struct EventScript { //max 40hbytes
	ConditionalEvent condDefs[var];
	u8 eventData[var];
};

struct ObjectEventParams { //which $72 points to (variable length)
	u8 eventId;	//fixed part
};

stringBase $94 = #8400/#8600 (at bank $18?)
stringId $76 = $0740[$71]
	where $71 = $72[1]
		where $72 = $2c:8600[index = $6c]
			where $6c = $7b01.x
				where x = offset to byte of 1st FF's
	where $0740 = $7b00.x ~40hbytes
		where x = getOffsetOfAfter2byteOfFF
		were $7b00 = 40h bytes at ptr[scriptId]
			where ptr = 
				$78 == 0 then $2c:8200
				otherwise $2c:8400
			where scriptId = runtimeobject.+00