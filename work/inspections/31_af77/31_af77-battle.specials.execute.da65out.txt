; da65 V2.11.0 - (C) Copyright 2000-2005,  Ullrich von Bassewitz
; Created:    2017-12-21 23:17:47
; Input file: D:\Documents\programming\eclipse workspaces\ff3\hack-and-patch\work\base-binary\ff3_plain.nes.noheader
; Page:   1


    .setcpu "65C02"

; ----------------------------------------------------------------------------
invokeBattleFunction:= $9E58                ; bank $30
doFight     := $9E8A; bank $30
getActor2C  := $A2B5; bank $31
cacheStatus := $A2BA; bank $31
getRandomTargetFromEnemyParty:= $A2E9       ; bank $31
getRandomTarget := $A300; bank $31
sumDamageForDisplay:= $A368                 ; bank $31
addToAttackOffsetOf:= $A389                 ; bank $31
isRangedWeapon  := $A397; bank $31
loadBattlePlayers:= $A400                   ; bank $31
loadPlayer  := $A482; bank $31
loadMobParam    := $A4F6; bank $31
useItem     := $A65E; bank $31
decideEnemyAction:= $A732                   ; bank $31
getEffectTarget2C:= $A8C8                   ; bank $31
setRandomTargetFromEnemyParty:= $A8CD       ; bank $31
setEnemyTarget  := $A8E1; bank $31
decideEnemyActionTarget:= $A91B             ; bank $31
isValidTarget   := $A9F7; bank $31
calcPlayerParam := $AA16; bank $31
addItemBonus    := $AF63; bank $31
battle.specials.invoke_handler:= $B15F      ; bank $31
battle.specials.handle_00:= $B17C           ; bank $31
battle.specials.handle_01:= $B233           ; bank $31
handleStatusMagic:= $B30C                   ; bank $31
handleToadMinimum:= $B3F1                   ; bank $31
handleProtect   := $B474; bank $31
handleHaste := $B480; bank $31
battle.specials.handle_0a:= $B48C           ; bank $31
handleErase := $B49B; bank $31
handleSegmentation:= $B4D4                  ; bank $31
handleSuicidalExplosion:= $B51F             ; bank $31
calcHealAmount  := $B6DD; bank $31
magic_protect   := $B704; bank $31
setResultDamageInvalid:= $B74B              ; bank $31
doMagicHaste    := $B752; bank $31
isTargetNotResistable:= $B875               ; bank $31
calcMagicHitCountAndClearTargetIfMiss:= $B8E7   ; bank $31
clearEffectTargetIfMiss:= $B921             ; bank $31
clearEffectTarget:= $B926                   ; bank $31
proliferate := $B9AB; bank $31
battle.specials.pickup_victim_of_reflection:= $B9FA; bank $31
battle.push_damage_value_for_2nd_phase:= $BB1C  ; bank $31
getNumberOfRandomSuccess:= $BB28            ; bank $31
calcDamage  := $BB44; bank $31
isTargetWeakToHoly:= $BBE2                  ; bank $31
applyStatus := $BBF3; bank $31
getTarget2C := $BC25; bank $31
damageHp    := $BCD2; bank $31
healHp      := $BD24; bank $31
spoilHp     := $BD67; bank $31
shiftRightDamageBy2:= $BDAA                 ; bank $31
setCalcTargetToActor:= $BDB3                ; bank $31
setCalcTargetPtrToOpponent:= $BDBC          ; bank $31
checkForEffectTargetDeath:= $BDC5           ; bank $31
checkStatusEffect:= $BE14                   ; bank $31
battle.specials.try_to_apply_enchanted_status:= $BE43; bank $31
updateBaseOffset:= $BE90; bank $31
setYtoOffsetOf  := $BE98; bank $31
calcDataAddress := $BE9D; bank $31
rebui.L_dBackpackItems:= $BEBF                ; bank $31
checkSegmentation:= $BF53                   ; bank $31
beginBattle := $C049; bank $3e
menu.opening.title_page:= $C06E             ; bank $3e
field.enterDungeon:= $C1BB                  ; bank $3e
field.dispatchInput:= $C243                 ; bank $3e
field_OnStart   := $C269; bank $3e
field_doScroll  := $C389; bank $3e
field_setScroll := $C398; bank $3e
field.OnMove    := $C4FC; bank $3e
field       := $C6B9; bank $3e
field.OnCharacterMoved:= $C6D5              ; bank $3e
field.getRandom := $C711; bank $3e
floor.getObjectEventPtr:= $C72C             ; bank $3e
field.callSoundDriver:= $C750               ; bank $3e
dive_into_float_land:= $C966                ; bank $3e
switchToBank3C  := $C98A; bank $3e
field.update_window_attr_buff:= $C98F       ; bank $3e
field.set_bg_attr_for_window:= $C9A9        ; bank $3e
field.merge_bg_attributes_with_buffer:= $CAB1   ; bank $3e
field.copyToVramWith_07d0:= $CB6B           ; bank $3e
field.loadWarpDestinationFloor:= $CBA4      ; bank $3e
loadFloorData   := $CBFA; bank $3e
field.loadMapRow:= $CC47; bank $3e
field.getMapDataPointers:= $CCBB            ; bank $3e
vehicleSpeeds   := $CD76; bank $3e
getVehicleSpeed := $CD7E; bank $3e
getTileParamsVertical:= $CE7A               ; bank $3e
field.load_label_text_into_buffer:= $D1B1   ; bank $3e
floor.getInputOrFireObjectEvent:= $D219     ; bank $3e
field.getAndMaskInput:= $D27A               ; bank $3e
field.get_input := $D281; bank $3e
field_maskInput := $D29A; bank $3e
field.upload_palette:= $D381                ; bank $3e
floor.load_object_sprite_into_buffer:= $DA3A    ; bank $3e
loadPatternToVramEx:= $DE0F                 ; bank $3e
loadPatternToVram:= $DE1A                   ; bank $3e
loadSmallPatternToVram:= $DE2A              ; bank $3e
floor.loadPatternForTiles:= $DE5A           ; bank $3e
loadTilePatternToVram:= $DEEA               ; bank $3e
floor.loadObjectPatterns:= $DF08            ; bank $3e
floor.loadObjectPattern:= $DF41             ; bank $3e
dungeon.mainLoop:= $E1DC; bank $3f
floor.getInputAndHandleEvent:= $E2F8        ; bank $3f
floor.fireOnMove:= $E396; bank $3f
floor.getEventSourceCoodinates:= $E4E9      ; bank $3f
floor.getChipEvent:= $E51C                  ; bank $3f
floor.event05   := $E69B; bank $3f
floor.event07   := $E6BE; bank $3f
dungeon.loadFloor:= $E7EC                   ; bank $3f
dungeon.loadFloorData:= $E803               ; bank $3f
floor.processChipEvent:= $E917              ; bank $3f
OnTreasure  := $E982; bank $3f
floor.getObjectEvent:= $E9BB                ; bank $3f
floor.loadEventScriptStream:= $EA04         ; bank $3f
floor.cache_event_script:= $EA1B            ; bank $3f
floor.getEvent  := $EA26; bank $3f
switch_to_object_params_bank:= $EB23        ; bank $3f
switch_to_floor_logics_bank:= $EB28         ; bank $3f
field.scrolldown_item_window:= $EB2D        ; bank $3f
field.abort_item_window_scroll:= $EB3C      ; bank $3f
field.do_scrolldown_item_window:= $EB43     ; bank $3f
field.reflect_window_scroll:= $EB61         ; bank $3f
field.scrollup_item_window:= $EB69          ; bank $3f
field.seek_text_to_next_line:= $EBA9        ; bank $3f
field.unseek_text_to_line_beginning:= $EBD1 ; bank $3f
field.show_sprites_on_lower_half_screen:= $EC0C ; bank $3f
field.show_sprites_on_region7:= $EC12       ; bank $3f
field.hide_sprites_under_window:= $EC18     ; bank $3f
field.showhide_sprites_by_region:= $EC1A    ; bank $3f
u8          := $EC67; bank $3f
field.show_message_UNKNOWN:= $EC83          ; bank $3f
field.show_message_window:= $EC8B           ; bank $3f
field.show_window:= $EC8D                   ; bank $3f
field.await_and_get_new_input:= $ECAB       ; bank $3f
field.get_next_input:= $ECBD                ; bank $3f
field.get_next_input:= $ECC4                ; bank $3f
field.advance_frame_with_sound:= $ECD8      ; bank $3f
field.draw_window_top:= $ECE5               ; bank $3f
restore_banks_by_$57:= $ECF5                ; bank $3f
field.draw_in_place_window:= $ECFA          ; bank $3f
field.draw_window_box:= $ED02               ; bank $3f
field.init_window_attr_buffer:= $ED56       ; bank $3f
field.get_window_region:= $ED61             ; bank $3f
field.draw_window_row:= $EDC6               ; bank $3f
field.sync_ppu_scroll:= $EDE1               ; bank $3f
field.getWindowTilesForTop:= $EDF6          ; bank $3f
field.getWindowTilesForMiddle:= $EE1D       ; bank $3f
field.getWindowTilesForBottom:= $EE3E       ; bank $3f
field.stream_string_in_window:= $EE65       ; bank $3f
field.load_and_draw_string:= $EE9A          ; bank $3f
field.draw_string_in_window:= $EEC0         ; bank $3f
textd.draw_in_box:= $EEFA                   ; bank $3f
textd.eval_replacement:= $F02A              ; bank $3f
field.string.eval_code_10_13:= $F239        ; bank $3f
field.get_max_available_job_id:= $F38A      ; bank $3f
textd.setup_output_ptr_to_next_column:= $F3AC   ; bank $3f
textd.save_text_ptr:= $F3E4                 ; bank $3f
textd.restore_text_ptr:= $F3ED              ; bank $3f
textd.trim_name_left:= $F3FA                ; bank $3f
field.set_vram_addr_for_window:= $F40A      ; bank $3f
field.get_vram_addr_of_line_above:= $F435   ; bank $3f
menu.savefile.erase_windows:= $F44B         ; bank $3f
menu.erase_box_1e_x_14:= $F461              ; bank $3f
menu.erase_box_1e_x_1c:= $F465              ; bank $3f
menu.erase_box_of_width_1e:= $F467          ; bank $3f
menu.erase_box_from_bottom:= $F47A          ; bank $3f
floor.get_treasure:= $F549                  ; bank $3f
floor.get_treasure_item_id:= $F5C4          ; bank $3f
floor.get_item_price:= $F5D4                ; bank $3f
increment_gil   := $F5FF; bank $3f
invert_treasure_loot_flag:= $F640           ; bank $3f
field.calc_draw_width_and_init_window_tile_buffer:= $F670; bank $3f
field.init_window_tile_buffer:= $F683       ; bank $3f
field.draw_window_content:= $F692           ; bank $3f
field.upload_window_content:= $F6AA         ; bank $3f
switch_to_character_logics_bank:= $F727     ; bank $3f
call_doBattle   := $F800; bank $3f
restoreFieldVariables:= $F83B               ; bank $3f
call_32_8000    := $F854; bank $3f
ppud.upload_palette:= $F897                 ; bank $3f
do_sprite_dma_from_0200:= $F8AA             ; bank $3f
ppud.update_sprites_and_palette_after_nmi:= $F8B0; bank $3f
ppud.update_palette_after_nmi:= $F8BC       ; bank $3f
ppud.update_sprites_after_nmi:= $F8C5       ; bank $3f
ppud.sync_registers_with_cache:= $F8CB      ; bank $3f
ppud.set_vram_addr:= $F8E0                  ; bank $3f
mul8x8_reg  := $F8EA; bank $3f
offset$7e_16    := $F8F2; bank $3f
offset$80_16    := $F8FE; bank $3f
memcpy      := $F92F; bank $3f
copy_to_vram_with_encounter_mode:= $F942    ; bank $3f
copyToVramDirect:= $F969; bank $3f
copyToVram  := $F970; bank $3f
call_2e_9d53    := $FA0E; bank $3f
blackOutScreen  := $FA1D; bank $3f
doBattle    := $FA26; bank $3f
saveNmiIrqHandlerAndSetHandlerForBattle:= $FAB5 ; bank $3f
restoreIrqHandlerAndNmiHandler:= $FADD      ; bank $3f
saveFieldVars   := $FB17; bank $3f
irq_handler := $FB30; bank $3f
ppud.nmi_handler:= $FB57; bank $3f
ppud.await_nmi_completion:= $FB80           ; bank $3f
switch_16k_synchronized:= $FB87             ; bank $3f
switch_16k_synchronized_nocache:= $FB89     ; bank $3f
getPad1Input    := $FBAA; bank $3f
getBattleRandom := $FBEF; bank $3f
initBattleRandom:= $FC27; bank $3f
div         := $FC92; bank $3f
mul8x8      := $FCD6; bank $3f
mul16x16    := $FCF5; bank $3f
flagTargetBit   := $FD20; bank $3f
clearTargetBit  := $FD2C; bank $3f
maskTargetBit   := $FD38; bank $3f
shiftLeftN  := $FD3C; bank $3f
shiftRightN := $FD43; bank $3f
.L_FD44       := $FD44
.L_FD45       := $FD45
.L_FD46       := $FD46
copyTo_$7ad7_x_Until0:= $FD4A               ; bank $3f
get2byteAtBank18:= $FD60; bank $3f
loadTo7400Ex    := $FDA6; bank $3f
copyTo7400  := $FDDC; bank $3f
call_bank30_9e58:= $FDF3; bank $3f
thunk_await_nmi_by_set_handler:= $FF00      ; bank $3f
call_switchFirst2Banks:= $FF03              ; bank $3f
call_switch1stBank:= $FF06                  ; bank $3f
call_switch2ndBank:= $FF09                  ; bank $3f
switch_1st_page := $FF0C; bank $3f
switch_2pages   := $FF17; bank $3f
switch_2nd_page := $FF1F; bank $3f
nmi_handler_01  := $FF2A; bank $3f
setNmiHandlerTo_ff2a_andWaitNmi:= $FF36     ; bank $3f
hardware_vectors:= $FFF0; bank $3f
; ----------------------------------------------------------------------------
; bank $31
battle.specials.execute:
    lda #$00    ; AF77 A9 00
    sta <$54     ; AF79 85 54
    ldx #$09    ; AF7B A2 09
.L_AF7D:
  sta $7EB8,x ; AF7D 9D B8 7E
    dex             ; AF80 CA
    bpl .L_AF7D   ; AF81 10 FA
    lda <$CC     ; AF83 A5 CC
    beq .L_AF8B   ; AF85 F0 04
.L_AF87:
  ldy #$2C    ; AF87 A0 2C
    bne .L_AFD6   ; AF89 D0 4B
.L_AF8B:
  jsr getActor2C                  ; AF8B 20 B5 A2
    bmi .L_AF9A   ; AF8E 30 0A
    and #$10    ; AF90 29 10
    beq .L_AF9A   ; AF92 F0 06
    lda <$1A     ; AF94 A5 1A
    cmp #$50    ; AF96 C9 50
    bcs .L_AF87   ; AF98 B0 ED
.L_AF9A:
  ldy #$01    ; AF9A A0 01
    lda [$6E],y ; AF9C B1 6E
    and #$30    ; AF9E 29 30
    beq .L_AFC8   ; AFA0 F0 26
    and #$20    ; AFA2 29 20
    beq .L_AFBB   ; AFA4 F0 15
    lda <$1A     ; AFA6 A5 1A
    cmp #$F6    ; AFA8 C9 F6
    beq .L_AFC8   ; AFAA F0 1C
    lda #$53    ; AFAC A9 53
    bne .L_AFBD   ; AFAE D0 0D
    jsr getActor2C                  ; AFB0 20 B5 A2
    bpl .L_AFBB   ; AFB3 10 06
    lda <$1A     ; AFB5 A5 1A
    cmp #$38    ; AFB7 C9 38
    bcs .L_AFC8   ; AFB9 B0 0D
.L_AFBB:
  lda #$50    ; AFBB A9 50
.L_AFBD:
  sta $78DA   ; AFBD 8D DA 78
    lda #$18    ; AFC0 A9 18
    sta $7EC2   ; AFC2 8D C2 7E
    jmp .L_B15E   ; AFC5 4C 5E B1
; ----------------------------------------------------------------------------
.L_AFC8:
  jsr getActor2C                  ; AFC8 20 B5 A2
    and #$18    ; AFCB 29 18
    bne .L_AFD6   ; AFCD D0 07
    sec             ; AFCF 38
    lda <$1A     ; AFD0 A5 1A
    sbc #$C8    ; AFD2 E9 C8
    sta <$1A     ; AFD4 85 1A
.L_AFD6:
  lda [$6E],y ; AFD6 B1 6E
    and #$E7    ; AFD8 29 E7
    sta [$6E],y ; AFDA 91 6E
    ldx #$00    ; AFDC A2 00
    lda <$1A     ; AFDE A5 1A
    sta $7E88   ; AFE0 8D 88 7E
    cmp #$5B    ; AFE3 C9 5B
    bcc .L_AFE8   ; AFE5 90 01
    inx             ; AFE7 E8
.L_AFE8:
  stx $7EC3   ; AFE8 8E C3 7E
    lda <$1A     ; AFEB A5 1A
    sta <$18     ; AFED 85 18
    lda #$08    ; AFEF A9 08
    sta <$1A     ; AFF1 85 1A
    lda #$C0    ; AFF3 A9 C0
    sta <$20     ; AFF5 85 20
    lda #$98    ; AFF7 A9 98
    sta <$21     ; AFF9 85 21
    ldx #$00    ; AFFB A2 00
    ldy #$18    ; AFFD A0 18
    tya             ; AFFF 98
    jsr loadTo7400Ex                ; B000 20 A6 FD
    lda $7406   ; B003 AD 06 74
    sta $7E9D   ; B006 8D 9D 7E
    ldx #$08    ; B009 A2 08
    ldy #$00    ; B00B A0 00
    lda $7E99   ; B00D AD 99 7E
.L_B010:
  asl a       ; B010 0A
    bcc .L_B014   ; B011 90 01
    iny             ; B013 C8
.L_B014:
  dex             ; B014 CA
    bne .L_B010   ; B015 D0 F9
    sty <$2A     ; B017 84 2A
    ldy #$30    ; B019 A0 30
    lda [$6E],y ; B01B B1 6E
    bmi .L_B029   ; B01D 30 0A
    lda #$75    ; B01F A9 75
    sta <$70     ; B021 85 70
    lda #$75    ; B023 A9 75
    sta <$71     ; B025 85 71
    bne .L_B031   ; B027 D0 08
.L_B029:
  lda #$75    ; B029 A9 75
    sta <$70     ; B02B 85 70
    lda #$76    ; B02D A9 76
    sta <$71     ; B02F 85 71
.L_B031:
  jsr cacheStatus                 ; B031 20 BA A2
    ldx #$FF    ; B034 A2 FF
    stx <$78     ; B036 86 78
    stx <$79     ; B038 86 79
    stx <$7A     ; B03A 86 7A
    stx <$7B     ; B03C 86 7B
    inx             ; B03E E8
    stx $7574   ; B03F 8E 74 75
    stx $7573   ; B042 8E 73 75
    lda $7E9D   ; B045 AD 9D 7E
    cmp #$06    ; B048 C9 06
    beq .L_B065   ; B04A F0 19
    ldx <$62     ; B04C A6 62
    lda <$F0,x   ; B04E B5 F0
    and #$C0    ; B050 29 C0
    beq .L_B057   ; B052 F0 03
    jmp .L_B15E   ; B054 4C 5E B1
; ----------------------------------------------------------------------------
.L_B057:
  ldx $7EC1   ; B057 AE C1 7E
    lda $7E99   ; B05A AD 99 7E
    jsr maskTargetBit               ; B05D 20 38 FD
    bne .L_B065   ; B060 D0 03
    jmp .L_B139   ; B062 4C 39 B1
; ----------------------------------------------------------------------------
.L_B065:
  lda <$CC     ; B065 A5 CC
    bne .L_B0D3   ; B067 D0 6A
    lda $7405   ; B069 AD 05 74
    ldy #$10    ; B06C A0 10
    and #$10    ; B06E 29 10
    beq .L_B073   ; B070 F0 01
    iny             ; B072 C8
.L_B073:
  lda [$6E],y ; B073 B1 6E
    sta <$18     ; B075 85 18
    lsr a       ; B077 4A
    clc             ; B078 18
    adc $7401   ; B079 6D 01 74
    sta <$25     ; B07C 85 25
    ldx <$62     ; B07E A6 62
    lda <$F0,x   ; B080 B5 F0
    and #$04    ; B082 29 04
    beq .L_B088   ; B084 F0 02
    lsr <$25     ; B086 46 25
.L_B088:
  ldy #$0F    ; B088 A0 0F
    lda [$6E],y ; B08A B1 6E
    jsr .L_FD44   ; B08C 20 44 FD
    sta <$19     ; B08F 85 19
    ldy #$00    ; B091 A0 00
    lda [$6E],y ; B093 B1 6E
    jsr .L_FD45   ; B095 20 45 FD
    sta <$1A     ; B098 85 1A
    lda <$18     ; B09A A5 18
    jsr .L_FD45   ; B09C 20 45 FD
    sec             ; B09F 38
    adc <$19     ; B0A0 65 19
    adc <$1A     ; B0A2 65 1A
    sta <$24     ; B0A4 85 24
    sta <$38     ; B0A6 85 38
    jsr getNumberOfRandomSuccess    ; B0A8 20 28 BB
    sta <$7C     ; B0AB 85 7C
    ldy #$33    ; B0AD A0 33
    lda [$6E],y ; B0AF B1 6E
    and #$E0    ; B0B1 29 E0
    jsr .L_FD46   ; B0B3 20 46 FD
    and $7400   ; B0B6 2D 00 74
    beq .L_B0D3   ; B0B9 F0 18
    lda <$30     ; B0BB A5 30
    sta <$18     ; B0BD 85 18
    lda #$05    ; B0BF A9 05
    sta <$1A     ; B0C1 85 1A
    lda #$00    ; B0C3 A9 00
    sta <$19     ; B0C5 85 19
    sta <$1B     ; B0C7 85 1B
    jsr div     ; B0C9 20 92 FC
    lda <$1C     ; B0CC A5 1C
    clc             ; B0CE 18
    adc <$30     ; B0CF 65 30
    sta <$7C     ; B0D1 85 7C
.L_B0D3:
  jsr battle.specials.invoke_handler  ; B0D3 20 5F B1
    ldx <$64     ; B0D6 A6 64
    lda <$79     ; B0D8 A5 79
    cmp #$FF    ; B0DA C9 FF
    beq .L_B129   ; B0DC F0 4B
    ldx <$64     ; B0DE A6 64
    lda $7574   ; B0E0 AD 74 75
    bne .L_B0F3   ; B0E3 D0 0E
    lda <$78     ; B0E5 A5 78
    sta $7E4F,x ; B0E7 9D 4F 7E
    inx             ; B0EA E8
    lda <$79     ; B0EB A5 79
    sta $7E4F,x ; B0ED 9D 4F 7E
    jmp .L_B129   ; B0F0 4C 29 B1
; ----------------------------------------------------------------------------
.L_B0F3:
  jsr getTarget2C                 ; B0F3 20 25 BC
    and #$07    ; B0F6 29 07
    asl a       ; B0F8 0A
    tax             ; B0F9 AA
    inx             ; B0FA E8
    lda $7E5F,x ; B0FB BD 5F 7E
    cmp #$FF    ; B0FE C9 FF
    beq .L_B118   ; B100 F0 16
    dex             ; B102 CA
    clc             ; B103 18
    lda $7E5F,x ; B104 BD 5F 7E
    adc <$78     ; B107 65 78
    sta $7E5F,x ; B109 9D 5F 7E
    inx             ; B10C E8
    lda $7E5F,x ; B10D BD 5F 7E
    adc <$79     ; B110 65 79
    sta $7E5F,x ; B112 9D 5F 7E
    jmp .L_B11C   ; B115 4C 1C B1
; ----------------------------------------------------------------------------
.L_B118:
  dex             ; B118 CA
    jsr battle.push_damage_value_for_2nd_phase; B119 20 1C BB
.L_B11C:
  lda $78B5   ; B11C AD B5 78
    sta <$70     ; B11F 85 70
    lda $78B6   ; B121 AD B6 78
    sta <$71     ; B124 85 71
    jmp .L_B131   ; B126 4C 31 B1
; ----------------------------------------------------------------------------
.L_B129:
  jsr setCalcTargetPtrToOpponent  ; B129 20 BC BD
    lda #$00    ; B12C A9 00
    jsr checkForEffectTargetDeath   ; B12E 20 C5 BD
.L_B131:
  jsr setCalcTargetToActor        ; B131 20 B3 BD
    lda #$01    ; B134 A9 01
    jsr checkForEffectTargetDeath   ; B136 20 C5 BD
.L_B139:
  inc $7EC1   ; B139 EE C1 7E
    lda $7EC1   ; B13C AD C1 7E
    cmp #$08    ; B13F C9 08
    beq .L_B15E   ; B141 F0 1B
    cmp #$04    ; B143 C9 04
    bne .L_B14E   ; B145 D0 07
    lda $7E9A   ; B147 AD 9A 7E
    and #$40    ; B14A 29 40
    beq .L_B15E   ; B14C F0 10
.L_B14E:
  clc             ; B14E 18
    lda <$70     ; B14F A5 70
    adc #$40    ; B151 69 40
    sta <$70     ; B153 85 70
    lda <$71     ; B155 A5 71
    adc #$00    ; B157 69 00
    sta <$71     ; B159 85 71
    jmp .L_B031   ; B15B 4C 31 B0
; ----------------------------------------------------------------------------
.L_B15E:
  rts             ; B15E 60
; ----------------------------------------------------------------------------
