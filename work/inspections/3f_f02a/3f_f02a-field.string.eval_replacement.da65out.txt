; da65 V2.11.0 - (C) Copyright 2000-2005,  Ullrich von Bassewitz
; Created:    2017-11-26 18:08:50
; Input file: D:\Documents\programming\eclipse workspaces\ff3\hack-and-patch\work\base-binary\ff3_hack_base.nes.noheader
; Page:       1


        .setcpu "65C02"

; ----------------------------------------------------------------------------
invokeEffectFunction:= $8000                    ; bank $32
soundDriverEntry:= $8003                        ; bank $36
6401f           := $800F                        ; bank $32
dispatchBattleFunction:= $8012                  ; bank $34
playNoiseAndSquare1:= $8030                     ; bank $36
setCurrentPlayerPtrs:= $806C                    ; bank $34
battleLoop      := $8074                        ; bank $34
endBattle       := $8160                        ; bank $34
presentCharacter:= $8185                        ; bank $34
initBattleVars  := $8213                        ; bank $34
battle.increment_number_of_command_selection:= $8271; bank $34
updatePlayerBaseParams:= $8306                  ; bank $34
beginBattlePhase:= $8374                        ; bank $34
playEffect      := $8411                        ; bank $34
playEffect_0F   := $8460                        ; bank $34
playEffect_0e   := $8470                        ; bank $34
buildEnemyDeadBits:= $8496                      ; bank $34
playEffect_0d   := $84D7                        ; bank $34
playEffect_0c   := $84F6                        ; bank $34
playEffect_0b   := $84FB                        ; bank $34
playEffect_09   := $850A                        ; bank $34
effect08        := $8516                        ; bank $34
effect06        := $8528                        ; bank $34
effect07        := $852D                        ; bank $34
set52toActorIndexFromEffectBit:= $8532          ; bank $34
getBattleFieldId:= $8533                        ; bank $3a
playEffect_04   := $853B                        ; bank $34
playEffect_05   := $8540                        ; bank $34
dispatchPresentScene_1f:= $8545                 ; bank $34
playEffect_03   := $8576                        ; bank $34
playEffect_01   := $8577                        ; bank $34
playEffect_00   := $8613                        ; bank $34
doNothing_8689  := $8689                        ; bank $34
showDamage      := $868A                        ; bank $34
targetBitToCharIndex:= $86AB                    ; bank $34
set_encounter_mode:= $87BE                      ; bank $34
setPlayerPtrs   := $88E1                        ; bank $34
loadCursorSprites:= $8902                       ; bank $34
updateMusicStream:= $8925                       ; bank $36
tileSprites2x2  := $892E                        ; bank $34
loadAndInitCursorPos:= $8966                    ; bank $34
getInputAndUpdateCursorWithSound:= $899E        ; bank $34
switch2ndBankToSoundDataBank:= $899F            ; bank $36
effect_17       := $89B7                        ; bank $32
getInputAndUpdateCursor_OnB:= $89DE             ; bank $34
getInputAndUpdateCursor_OnA:= $89E6             ; bank $34
getInputAndUpdateCursor_OnUp:= $89EE            ; bank $34
getInputAndUpdateCursor_OnLeft:= $8A82          ; bank $34
getInputAndUpdateCursor_OnRight:= $8A9F         ; bank $34
stopMusic       := $8AA7                        ; bank $36
getInputAndUpdateCursor_OnStartOrSelect:= $8ABE ; bank $34
muteChannels    := $8AC0                        ; bank $36
getInputAndUpdateCursor_end:= $8AC1             ; bank $34
moveSelection_dispatchInput_inputHandlers8:= $8ACF; bank $34
init4SpritesAt$0220:= $8ADF                     ; bank $34
incrementEffectFrame:= $8AE6                    ; bank $32
L8B29           := $8B29
draw8LineWindow := $8B38                        ; bank $34
L8B57           := $8B57
L8B78           := $8B78
putWindowSideBorderTile:= $8C56                 ; bank $34
loadMusicData   := $8C58                        ; bank $36
putWindowTopBottomBorderTile:= $8C84            ; bank $34
effect_0F       := $8CA4                        ; bank $32
effect_0E       := $8CEF                        ; bank $32
setBackgroundProperty:= $8D03                   ; bank $34
draw1RowWindow  := $8D1B                        ; bank $34
drawBorder      := $8DE5                        ; bank $34
eraseWindow     := $8EB0                        ; bank $34
effect_15       := $8EFB                        ; bank $32
eraseFromLeftBottom0Bx0A:= $8F0B                ; bank $34
field.loadTileParams:= $8F43                    ; bank $3a
getSortedIndex  := $8F57                        ; bank $34
sort            := $8F6F                        ; bank $34
presentBattle   := $8FF7                        ; bank $34
dispCommand_05_showActorName:= $905B            ; bank $34
getPaletteEntriesForWorld:= $9091               ; bank $3a
dispCommand_06_showActionName:= $90A0           ; bank $34
is_backattacked_32:= $90D2                      ; bank $32
effect_02       := $90D8                        ; bank $32
getPaletteEntriesForFloor:= $910B               ; bank $3a
getPaletteEntries:= $914B                       ; bank $3a
dispCommand_07_showTargetName:= $9177           ; bank $34
fieldMenu.updateCursorPos:= $91A3               ; bank $3c
floor.getDynamicChip:= $91C8                    ; bank $3a
setNoTargetMessage:= $91CE                      ; bank $34
dispCommand_08_show_effect_message:= $91D4      ; bank $34
dispCommand_09_show_message:= $91FE             ; bank $34
dispCommand09_sub00:= $923C                     ; bank $34
loadStatusMessage:= $9245                       ; bank $34
drawMessageWindow:= $9253                       ; bank $34
dispCommand09_sub01:= $925F                     ; bank $34
floor.init      := $9267                        ; bank $3a
waitPad1ADown   := $926B                        ; bank $34
dispCommand09_sub02:= $9275                     ; bank $34
printHp         := $92B5                        ; bank $34
dispCommand09_sub03:= $92DB                     ; bank $34
floor.copyEventScriptStream:= $92F3             ; bank $3c
dispCommand09_sub04:= $932B                     ; bank $34
getEventFlag    := $9344                        ; bank $3c
dispCommand_0B  := $934E                        ; bank $34
dispCommand_0C  := $9354                        ; bank $34
dispCommand_0D  := $935F                        ; bank $34
floor.searchSpaceForItem:= $937E                ; bank $3c
dispCommand_0E  := $93C4                        ; bank $34
updatePlayerStatus:= $93CD                      ; bank $34
updateEnemyStatus:= $9408                       ; bank $34
dispCommand_0A_waitForAButtonDownOrMessageTimeOut:= $9450; bank $34
dispCommand_00010204_closeWindow:= $94D6        ; bank $34
dispCommand_03_back4or5CommandIfMessageRemainsElseClose:= $94E7; bank $34
functionTableFor$8ff7_presentBattle0x0e:= $954D ; bank $34
setTableBaseAddrTo$8a40:= $95BD                 ; bank $34
setTableBaseAddrTo$8c40:= $95C6                 ; bank $34
setTableBaseAddrTo$00e0:= $95CF                 ; bank $34
setTableBaseAddrTo$00f0:= $95D8                 ; bank $34
itoa_16         := $95E1                        ; bank $34
jobMenu.main    := $962F                        ; bank $3c
countAndDecrementUntil0:= $9648                 ; bank $34
strToTileArray  := $966A                        ; bank $34
putDakuten      := $96F9                        ; bank $34
putHandakuten   := $9707                        ; bank $34
getPrevLinePtr  := $9715                        ; bank $34
strToTileArray_OnLinefeed:= $9735               ; bank $34
strToTileArray_OnChar02:= $9745                 ; bank $34
initTileArrayStorage:= $9754                    ; bank $34
calcActionOrder := $9777                        ; bank $34
getCommandInput := $986C                        ; bank $34
showBlowSprite_02:= $98D1                       ; bank $32
showBlowSprite_01:= $98E0                       ; bank $32
getRandomizedBlowSpritePosition:= $98E8         ; bank $32
effectCommand_01:= $9A1C                        ; bank $32
rewindCharacterIndex:= $9A42                    ; bank $34
commandWindow_OnCommand0001090a13:= $9A68       ; bank $34
createCommandWindow:= $9A69                     ; bank $34
putCanceledItem := $9AE7                        ; bank $34
playSoundEffect := $9B79                        ; bank $34
setYtoOffsetOf  := $9B88                        ; bank $34
setYtoOffset03  := $9B8D                        ; bank $34
setYtoOffset2F  := $9B94                        ; bank $34
setYtoOffset2E  := $9B9B                        ; bank $34
drawInfoWindow  := $9BA2                        ; bank $34
cachePlayerStatus:= $9D1D                       ; bank $34
presentSceneThunk:= $9D53                       ; bank $2e
drawEnemyNamesWindow:= $9D9E                    ; bank $34
executeAction   := $9DE4                        ; bank $34
invokeBattleFunction:= $9E58                    ; bank $30
doFight         := $9E8A                        ; bank $30
initBattle      := $9E8E                        ; bank $2e
effectCommand_03:= $9F11                        ; bank $32
putCharacterSprites:= $9F71                     ; bank $32
setActorCommandIdAndClearMode:= $9F7B           ; bank $34
setActionTargetToSelf:= $9F87                   ; bank $34
handleCommand00_0a_do_nothing:= $9FA8           ; bank $34
actionHandlers0x15:= $9FAC                      ; bank $34
executeAction_summon:= $9FD6                    ; bank $34
putStatusSprites:= $9FE4                        ; bank $32
floor.call_dispatchObjectEvent:= $A000          ; bank $3b
loadEnemyGroups := $A02A                        ; bank $2f
beginSwingFrame := $A059                        ; bank $33
fill_A0hBytes_f0_at$0200andSet$c8_0:= $A05E     ; bank $33
blowEffect_swingCountBoundForWeaponTypes:= $A077; bank $33
blowEffect_dispatchWeaponFunction_handlers:= $A080; bank $33
blowEffect_limitHitCountAndDispatchWeaponFunction:= $A094; bank $33
effect_playerBlow:= $A0C0                       ; bank $33
randomizeEnemyCount:= $A0C8                     ; bank $2f
load_enemy_graphics_params:= $A0E7              ; bank $2f
command_fight   := $A104                        ; bank $35
floor.object.dispatchEvent:= $A12B              ; bank $3b
render_enemy_graphics:= $A14A                   ; bank $2f
blowEffect_type04:= $A1A5                       ; bank $33
loadSprites     := $A1B9                        ; bank $2f
blowEffect_type07:= $A1EF                       ; bank $33
getHitCountOfCurrentHand:= $A245                ; bank $33
blowEffect_type03:= $A251                       ; bank $33
getActor2C      := $A2B5                        ; bank $31
cacheStatus     := $A2BA                        ; bank $31
checkmagic      := $A2DF                        ; bank $3d
getRandomTargetFromEnemyParty:= $A2E9           ; bank $31
blowEffect_type00_08:= $A2F2                    ; bank $33
blowEffect_type09:= $A2FB                       ; bank $33
getRandomTarget := $A300                        ; bank $31
getIndexOfGreatest:= $A30F                      ; bank $35
createIndexToGroupMap:= $A31F                   ; bank $2f
consumeEquippedItem:= $A353                     ; bank $35
blowEffect_type01:= $A365                       ; bank $33
handleCommand14_castMagic:= $A367               ; bank $35
sumDamageForDisplay:= $A368                     ; bank $31
blowEffect_type02:= $A36F                       ; bank $33
doSwing         := $A379                        ; bank $33
load_enemy_patterns:= $A37F                     ; bank $2f
addToAttackOffsetOf:= $A389                     ; bank $31
load_enemy_pattern:= $A38C                      ; bank $2f
isRangedWeapon  := $A397                        ; bank $31
load_enemy_graphics_for_layout9:= $A3AB         ; bank $2f
get_enemy_graphics_address_for_layout9:= $A3B8  ; bank $2f
handleCommand13_useItem:= $A3BB                 ; bank $35
clearWeaponSprite:= $A3F9                       ; bank $33
loadBattlePlayers:= $A400                       ; bank $31
fill_A0hBytes_f0_at$0200:= $A42B                ; bank $33
getActor2C      := $A42E                        ; bank $35
endInputCommand := $A433                        ; bank $35
getWeaponSprite := $A438                        ; bank $33
getSys0Random   := $A446                        ; bank $33
getSys0Random_00_ff:= $A44F                     ; bank $33
canPlayerPartyContinueFighting:= $A458          ; bank $35
loadPlayer      := $A482                        ; bank $31
loadMobParam    := $A4F6                        ; bank $31
fireCannon      := $A50B                        ; bank $35
fieldMenu.main  := $A52F                        ; bank $3d
updatePlayerOffset:= $A541                      ; bank $35
initString      := $A549                        ; bank $35
offset$4E_16    := $A558                        ; bank $35
getSys1Random   := $A564                        ; bank $35
modifyActionMessage:= $A56F                     ; bank $35
loadString      := $A609                        ; bank $35
useItem         := $A65E                        ; bank $31
fieldMenu.selectCharacter:= $A6B4               ; bank $3d
commandWindow_OnForwardSelected:= $A71C         ; bank $35
decideEnemyAction:= $A732                       ; bank $31
flashEnemy      := $A738                        ; bank $2f
commandWindow_OnBack:= $A750                    ; bank $35
showArrowAndDecideCommand:= $A784               ; bank $35
movePosition_end:= $A7C8                        ; bank $35
initMoveArrowSprite:= $A7CD                     ; bank $35
command_forward := $A7DF                        ; bank $35
command_back    := $A7EA                        ; bank $35
getInvertedLineFlag:= $A816                     ; bank $35
Point           := $A823                        ; bank $35
Point           := $A833                        ; bank $35
commandWindow_OnAttackSelected:= $A843          ; bank $35
commandWindow_selectSingleTargetAndGoNext:= $A848; bank $35
commandWindow_OnGuard:= $A877                   ; bank $35
field.loadAndDrawString:= $A87A                 ; bank $3d
command_guard   := $A881                        ; bank $35
saveMenu.close  := $A88C                        ; bank $3d
fieldMenu.OnSaveSelected:= $A897                ; bank $3d
commandWindow_OnEscapeSelected:= $A8AB          ; bank $35
commandWindow_OnSneakAway:= $A8B5               ; bank $35
command_escape  := $A8BF                        ; bank $35
getEffectTarget2C:= $A8C8                       ; bank $31
setRandomTargetFromEnemyParty:= $A8CD           ; bank $31
setEnemyTarget  := $A8E1                        ; bank $31
loadBlowEffectParams:= $A8EA                    ; bank $2f
decideEnemyActionTarget:= $A91B                 ; bank $31
command_sneakAway:= $A93B                       ; bank $35
commandWindow_OnJump:= $A9AB                    ; bank $35
loadActorSprite := $A9CF                        ; bank $2f
command_jump    := $A9D8                        ; bank $35
isValidTarget   := $A9F7                        ; bank $31
command_09_landing:= $AA11                      ; bank $35
calcPlayerParam := $AA16                        ; bank $31
commandWindow_0b_geomance:= $AA22               ; bank $35
getCommandInput_goNextCharacter:= $AA56         ; bank $35
command_0b      := $AA5D                        ; bank $35
field.get_menu_window_metrics:= $AABC           ; bank $3d
getCurrentTerrain:= $AAC3                       ; bank $35
field.draw_menu_window:= $AAF1                  ; bank $3d
field.menu_window_metrics:= $AAF7               ; bank $3d
geomanceTargetFlag:= $AB06                      ; bank $35
commandWindow_OnDetect:= $AB07                  ; bank $35
command_detect  := $AB0C                        ; bank $35
setEffectHandlerTo18:= $AB66                    ; bank $35
commandWindow_OnInspect:= $AB6E                 ; bank $35
command_inspect := $AB73                        ; bank $35
commandWindow_OnSteal:= $AB9F                   ; bank $35
command_steal   := $ABA4                        ; bank $35
blowEffect_end  := $AC35                        ; bank $33
buildDamageSprite:= $AC4B                       ; bank $33
commandWindow_OnChargeSelected:= $AC65          ; bank $35
command_charge  := $AC6F                        ; bank $35
setupDamageSprites:= $ACAA                      ; bank $33
commandWindow_OnSing:= $ACD0                    ; bank $35
floor.object.processEventUnderC0:= $ACD1        ; bank $3b
command_sing    := $ACD5                        ; bank $35
getDamageValueAndFlag:= $AD0A                   ; bank $33
commandWindow_OnIntimidate:= $AD0C              ; bank $35
command_intimidate:= $AD16                      ; bank $35
effect_0C       := $AD2B                        ; bank $33
commandWindow_OnCheer:= $AD6B                   ; bank $35
command_cheer   := $AD75                        ; bank $35
jobMenu.getCosts:= $AD85                        ; bank $3d
damagesToTilesAndColor:= $ADA6                  ; bank $33
commandWindow_OnItemSelected:= $ADAF            ; bank $35
getDamageDigitTilesAndColor:= $ADD1             ; bank $33
getJobParameter := $ADF2                        ; bank $3d
damageToTilesAndColor:= $ADF4                   ; bank $33
dispatchEffectFunction:= $AEDF                  ; bank $2f
is_backattacked_2f:= $AF48                      ; bank $2f
itemWindow_OnAButton:= $AF4C                    ; bank $35
presentScene    := $AF4E                        ; bank $2f
addItemBonus    := $AF63                        ; bank $31
getActionEffectLoadParam:= $AF6F                ; bank $33
callPtrOn$0093  := $AF71                        ; bank $2f
$af4e_funcTable;:= $AF74                        ; bank $2f
doSpecialAction := $AF77                        ; bank $31
presenetScene_1f:= $B024                        ; bank $2f
beginActionEffect:= $B09B                       ; bank $33
getChipIdAtObject:= $B0C5                       ; bank $3b
floor.shop      := $B0EB                        ; bank $3d
presentScene_1d := $B15E                        ; bank $2f
invokeActionHandler:= $B15F                     ; bank $31
floor.object    := $B17C                        ; bank $3b
itemWindow_OnB  := $B198                        ; bank $35
invertHorizontalIfBackattack:= $B19B            ; bank $33
presentScene_1c := $B1AC                        ; bank $2f
endItemWindow   := $B1B0                        ; bank $35
loadTileArrayOfItemProps:= $B1D8                ; bank $35
presentScene_17 := $B1E0                        ; bank $2f
floor.shop.getItemValues:= $B220                ; bank $3d
handleHealingMagic:= $B233                      ; bank $31
isHandFreeForItem:= $B242                       ; bank $35
floor.shop.getSellingPrice:= $B248              ; bank $3d
presentScene_13 := $B24C                        ; bank $2f
presentScene_12 := $B24F                        ; bank $2f
floor.shop.getItemValue:= $B270                 ; bank $3d
itemWindow_scrollRight:= $B2A7                  ; bank $35
presentScene_10 := $B2FA                        ; bank $2f
floor.loadObjects:= $B2FD                       ; bank $3b
handleStatusMagic:= $B30C                       ; bank $31
presentScene_0C := $B348                        ; bank $2f
floor.loadObject:= $B34E                        ; bank $3b
moveCharacterBack:= $B352                       ; bank $2f
itemWindow_scrollLeft:= $B362                   ; bank $35
call_b3c7       := $B38B                        ; bank $2f
moveCharacterForward:= $B38E                    ; bank $2f
handleToadMinimum:= $B3F1                       ; bank $31
getObjectBuilderAddress:= $B3F8                 ; bank $3b
drawEquipWindow := $B419                        ; bank $35
handleProtect   := $B474                        ; bank $31
handleHaste     := $B480                        ; bank $31
loadTileArrayForItemWindowColumn:= $B48B        ; bank $35
handleErase     := $B49B                        ; bank $31
itemWindow_moveCursor:= $B4D4                   ; bank $35
itemWindow_OnUse:= $B4F7                        ; bank $35
getObjectFlag   := $B51A                        ; bank $3b
handleSuicidalExplosion:= $B51F                 ; bank $31
floor.object.invokeEventAboveD0:= $B53F         ; bank $3b
loadEffectSprites:= $B589                       ; bank $33
drawEquipWindowNoErase:= $B5F9                  ; bank $35
redrawColumn    := $B601                        ; bank $35
commandWindow_OnMagic:= $B646                   ; bank $35
presentEffectAtTarget:= $B64F                   ; bank $33
presentActionEffect:= $B68D                     ; bank $33
floor.object.event.F0:= $B6BF                   ; bank $3b
calcHealAmount  := $B6DD                        ; bank $31
presentEffectAtTargetWorker:= $B6F3             ; bank $33
magic_protect   := $B704                        ; bank $31
presentEffectFrameAtTarget:= $B711              ; bank $33
setResultDamageInvalid:= $B74B                  ; bank $31
doMagicHaste    := $B752                        ; bank $31
setSpriteAndScrollx4:= $B7A9                    ; bank $33
swap60hBytesAt$0200and$02a0:= $B7B5             ; bank $33
loadAndBuildEffectSprites:= $B7CF               ; bank $33
magicWindow_OnUp:= $B7F9                        ; bank $35
magicWindow_OnDown:= $B82A                      ; bank $35
magicWindow_OnLeft:= $B863                      ; bank $35
setEffectSpriteTile:= $B866                     ; bank $33
magicWindow_OnRight:= $B86C                     ; bank $35
magicWindow_OnSelectOrStart:= $B874             ; bank $35
isTargetNotResistable:= $B875                   ; bank $31
magicWindow_OnA := $B877                        ; bank $35
initAndTileEffectSprites:= $B8AF                ; bank $33
calcMagicHitCountAndClearTargetIfMiss:= $B8E7   ; bank $31
magicWindow_OnB := $B8EE                        ; bank $35
isPlayerAllowedToUseItem:= $B8FD                ; bank $35
getEnemyCounts  := $B909                        ; bank $2f
clearEffectTargetIfMiss:= $B921                 ; bank $31
clearEffectTarget:= $B926                       ; bank $31
countEnemyInSameGroup:= $B927                   ; bank $2f
presentEnemyGeneration:= $B93A                  ; bank $2f
flagJob         := $B93E                        ; bank $35
setMagicTarget  := $B953                        ; bank $35
setItemEffectTarget:= $B979                     ; bank $35
segmentate      := $B9AB                        ; bank $31
commandWindow_OnMagic_inputHandlers8:= $BA2A    ; bank $35
loadTo7400FromBank30:= $BA3A                    ; bank $35
processPoison   := $BA41                        ; bank $35
put16hTilesFrom$7e:= $BA8E                      ; bank $2f
getPoisonDamage := $BADC                        ; bank $35
effect_0d       := $BAFD                        ; bank $33
callPtrOn$007e  := $BB15                        ; bank $33
getNumberOfRandomSuccess:= $BB28                ; bank $31
calcDamage      := $BB44                        ; bank $31
prize           := $BB49                        ; bank $35
isTargetWeakToHoly:= $BBE2                      ; bank $31
applyStatus     := $BBF3                        ; bank $31
getTarget2C     := $BC25                        ; bank $31
damageHp        := $BCD2                        ; bank $31
healHp          := $BD24                        ; bank $31
updateCharacterPos:= $BD45                      ; bank $33
getEncounterId  := $BD4D                        ; bank $3d
spoilHp         := $BD67                        ; bank $31
shiftRightDamageBy2:= $BDAA                     ; bank $31
setCalcTargetToActor:= $BDB3                    ; bank $31
isEncounterOccured:= $BDB9                      ; bank $3d
setCalcTargetPtrToOpponent:= $BDBC              ; bank $31
checkForEffectTargetDeath:= $BDC5               ; bank $31
checkStatusEffect:= $BE14                       ; bank $31
updateBaseOffset:= $BE90                        ; bank $31
setYtoOffsetOf  := $BE98                        ; bank $31
moveCharacter   := $BE9A                        ; bank $33
calcDataAddress := $BE9D                        ; bank $31
rebuildBackpackItems:= $BEBF                    ; bank $31
drawNextLineVertical:= $BEC6                    ; bank $3b
loadEffectSpritesWorker_base0:= $BF1E           ; bank $33
loadEffectSpritesWorker:= $BF24                 ; bank $33
checkSegmentation:= $BF53                       ; bank $31
battle.grow_player:= $BF7C                      ; bank $35
incrementItem   := $BFB3                        ; bank $35
beginBattle     := $C049                        ; bank $3e
field.enterDungeon:= $C1BB                      ; bank $3e
field.dispatchInput:= $C243                     ; bank $3e
field_OnStart   := $C269                        ; bank $3e
field_doScroll  := $C389                        ; bank $3e
field_setScroll := $C398                        ; bank $3e
field.OnMove    := $C4FC                        ; bank $3e
field           := $C6B9                        ; bank $3e
field.OnCharacterMoved:= $C6D5                  ; bank $3e
field.getRandom := $C711                        ; bank $3e
floor.getObjectEventPtr:= $C72C                 ; bank $3e
field.callSoundDriver:= $C750                   ; bank $3e
switchToBank3C  := $C98A                        ; bank $3e
field.update_window_attr_buff:= $C98F           ; bank $3e
field.set_bg_attr_for_window:= $C9A9            ; bank $3e
field.merge_bg_attributes_with_buffer:= $CAB1   ; bank $3e
field.copyToVramWith_07d0:= $CB6B               ; bank $3e
field.loadWarpDestinationFloor:= $CBA4          ; bank $3e
loadFloorData   := $CBFA                        ; bank $3e
field.loadMapRow:= $CC47                        ; bank $3e
field.getMapDataPointers:= $CCBB                ; bank $3e
vehicleSpeeds   := $CD76                        ; bank $3e
getVehicleSpeed := $CD7E                        ; bank $3e
getTileParamsVertical:= $CE7A                   ; bank $3e
field.loadString:= $D1B1                        ; bank $3e
floor.getInputOrFireObjectEvent:= $D219         ; bank $3e
field.getAndMaskInput:= $D27A                   ; bank $3e
field.get_input := $D281                        ; bank $3e
field_maskInput := $D29A                        ; bank $3e
loadPalette     := $D381                        ; bank $3e
floor.loadObjectSprite:= $DA3A                  ; bank $3e
loadPatternToVramEx:= $DE0F                     ; bank $3e
loadPatternToVram:= $DE1A                       ; bank $3e
loadSmallPatternToVram:= $DE2A                  ; bank $3e
floor.loadPatternForTiles:= $DE5A               ; bank $3e
loadTilePatternToVram:= $DEEA                   ; bank $3e
floor.loadObjectPatterns:= $DF08                ; bank $3e
floor.loadObjectPattern:= $DF41                 ; bank $3e
dungeon.mainLoop:= $E1DC                        ; bank $3f
floor.getInputAndHandleEvent:= $E2F8            ; bank $3f
floor.fireOnMove:= $E396                        ; bank $3f
floor.getEventSourceCoodinates:= $E4E9          ; bank $3f
floor.getChipEvent:= $E51C                      ; bank $3f
floor.event05   := $E69B                        ; bank $3f
floor.event07   := $E6BE                        ; bank $3f
dungeon.loadFloor:= $E7EC                       ; bank $3f
dungeon.loadFloorData:= $E803                   ; bank $3f
floor.processChipEvent:= $E917                  ; bank $3f
OnTreasure      := $E982                        ; bank $3f
floor.getObjectEvent:= $E9BB                    ; bank $3f
floor.loadEventScriptStream:= $EA04             ; bank $3f
floor.cache_event_script:= $EA1B                ; bank $3f
floor.getEvent  := $EA26                        ; bank $3f
switch_to_object_params_bank:= $EB23            ; bank $3f
switch_to_floor_logics_bank:= $EB28             ; bank $3f
field.scrolldown_item_window:= $EB2D            ; bank $3f
field.abort_item_window_scroll:= $EB3C          ; bank $3f
field.do_scrolldown_item_window:= $EB43         ; bank $3f
field.reflect_window_scroll:= $EB61             ; bank $3f
field.scrollup_item_window:= $EB69              ; bank $3f
field.seek_text_to_next_line:= $EBA9            ; bank $3f
field.unseek_text_to_line_beginning:= $EBD1     ; bank $3f
field.show_sprites_on_lower_half_screen:= $EC0C ; bank $3f
field.show_sprites_on_region7:= $EC12           ; bank $3f
field.hide_sprites_under_window:= $EC18         ; bank $3f
field.showhide_sprites_by_region:= $EC1A        ; bank $3f
u8              := $EC67                        ; bank $3f
field.show_message_UNKNOWN:= $EC83              ; bank $3f
field.show_message_window:= $EC8B               ; bank $3f
field.show_window:= $EC8D                       ; bank $3f
field.await_and_get_new_input:= $ECAB           ; bank $3f
field.get_next_input:= $ECBD                    ; bank $3f
field.get_next_input:= $ECC4                    ; bank $3f
field.advance_frame_with_sound:= $ECD8          ; bank $3f
field.draw_window_top:= $ECE5                   ; bank $3f
restore_banks_by_$57:= $ECF5                    ; bank $3f
field.draw_in_place_window:= $ECFA              ; bank $3f
field.draw_window_box:= $ED02                   ; bank $3f
field.init_window_attr_buffer:= $ED56           ; bank $3f
field.get_window_region:= $ED61                 ; bank $3f
field.draw_window_row:= $EDC6                   ; bank $3f
field.sync_ppu_scroll:= $EDE1                   ; bank $3f
field.getWindowTilesForTop:= $EDF6              ; bank $3f
field.getWindowTilesForMiddle:= $EE1D           ; bank $3f
field.getWindowTilesForBottom:= $EE3E           ; bank $3f
field.stream_string_in_window:= $EE65           ; bank $3f
field.load_and_draw_string:= $EE9A              ; bank $3f
field.draw_string_in_window:= $EEC0             ; bank $3f
field.eval_and_draw_string:= $EEFA              ; bank $3f
field.string.eval_code_10_13:= $F239            ; bank $3f
LF291           := $F291
LF2D8           := $F2D8
getLastValidJobId:= $F38A                       ; bank $3f
LF3AC           := $F3AC
LF3E4           := $F3E4
LF3ED           := $F3ED
setVramAddrForWindow:= $F40A                    ; bank $3f
getTreasure     := $F549                        ; bank $3f
getTreasureItemId:= $F5C4                       ; bank $3f
getItemValue    := $F5D4                        ; bank $3f
increment_gil   := $F5FF                        ; bank $3f
invert_treasure_loot_flag:= $F640               ; bank $3f
field.calc_draw_width_and_init_window_tile_buffer:= $F670; bank $3f
field.init_window_tile_buffer:= $F683           ; bank $3f
field.draw_window_content:= $F692               ; bank $3f
field.upload_window_content:= $F6AA             ; bank $3f
switch_to_character_logics_bank:= $F727         ; bank $3f
call_doBattle   := $F800                        ; bank $3f
restoreFieldVariables:= $F83B                   ; bank $3f
call_32_8000    := $F854                        ; bank $3f
ppud.upload_palette:= $F897                     ; bank $3f
do_sprite_dma_from_0200:= $F8AA                 ; bank $3f
ppud.update_sprites_and_palette_after_nmi:= $F8B0; bank $3f
ppud.update_palette_after_nmi:= $F8BC           ; bank $3f
ppud.update_sprites_after_nmi:= $F8C5           ; bank $3f
ppud.sync_registers_with_cache:= $F8CB          ; bank $3f
ppud.set_vram_addr:= $F8E0                      ; bank $3f
mul8x8_reg      := $F8EA                        ; bank $3f
offset$7e_16    := $F8F2                        ; bank $3f
offset$80_16    := $F8FE                        ; bank $3f
memcpy          := $F92F                        ; bank $3f
copy_to_vram_with_encounter_mode:= $F942        ; bank $3f
copyToVramDirect:= $F969                        ; bank $3f
copyToVram      := $F970                        ; bank $3f
call_2e_9d53    := $FA0E                        ; bank $3f
blackOutScreen  := $FA1D                        ; bank $3f
doBattle        := $FA26                        ; bank $3f
saveNmiIrqHandlerAndSetHandlerForBattle:= $FAB5 ; bank $3f
restoreIrqHandlerAndNmiHandler:= $FADD          ; bank $3f
saveFieldVars   := $FB17                        ; bank $3f
irq_handler     := $FB30                        ; bank $3f
ppud.nmi_handler:= $FB57                        ; bank $3f
ppud.await_nmi_completion:= $FB80               ; bank $3f
switch_16k_synchronized:= $FB87                 ; bank $3f
switch_16k_synchronized_nocache:= $FB89         ; bank $3f
getPad1Input    := $FBAA                        ; bank $3f
getBattleRandom := $FBEF                        ; bank $3f
initBattleRandom:= $FC27                        ; bank $3f
div             := $FC92                        ; bank $3f
mul8x8          := $FCD6                        ; bank $3f
mul16x16        := $FCF5                        ; bank $3f
flagTargetBit   := $FD20                        ; bank $3f
clearTargetBit  := $FD2C                        ; bank $3f
maskTargetBit   := $FD38                        ; bank $3f
shiftLeftN      := $FD3C                        ; bank $3f
shiftRightN     := $FD43                        ; bank $3f
copyTo_$7ad7_x_Until0:= $FD4A                   ; bank $3f
get2byteAtBank18:= $FD60                        ; bank $3f
loadTo7400Ex    := $FDA6                        ; bank $3f
copyTo7400      := $FDDC                        ; bank $3f
call_bank30_9e58:= $FDF3                        ; bank $3f
waitNmiBySetHandler:= $FF00                     ; bank $3f
call_switchFirst2Banks:= $FF03                  ; bank $3f
call_switch1stBank:= $FF06                      ; bank $3f
call_switch2ndBank:= $FF09                      ; bank $3f
switch_1st_page := $FF0C                        ; bank $3f
switch_2pages   := $FF17                        ; bank $3f
switch_2nd_page := $FF1F                        ; bank $3f
nmi_handler_01  := $FF2A                        ; bank $3f
setNmiHandlerTo_ff2a_andWaitNmi:= $FF36         ; bank $3f
hardware_vectors:= $FFF0                        ; bank $3f
; ----------------------------------------------------------------------------
; bank $3f
field.string.eval_replacement:
        pha                                     ; F02A 48
        ldx     $67                             ; F02B A6 67
        cmp     #$1D                            ; F02D C9 1D
        beq     LF034                           ; F02F F0 03
        lda     ($3E),y                         ; F031 B1 3E
        tax                                     ; F033 AA
LF034:  stx     $84                             ; F034 86 84
        stx     $67                             ; F036 86 67
        inc     $3E                             ; F038 E6 3E
        bne     LF03E                           ; F03A D0 02
        inc     $3F                             ; F03C E6 3F
LF03E:  pla                                     ; F03E 68
        cmp     #$14                            ; F03F C9 14
        bcs     LF046                           ; F041 B0 03
        jmp     field.string.eval_code_10_13    ; F043 4C 39 F2
; ----------------------------------------------------------------------------
LF046:  bne     LF04F                           ; F046 D0 07
        lda     $84                             ; F048 A5 84
        sta     $90                             ; F04A 85 90
        jmp     field.eval_and_draw_string      ; F04C 4C FA EE
; ----------------------------------------------------------------------------
LF04F:  cmp     #$18                            ; F04F C9 18
        bcs     LF09B                           ; F051 B0 48
        sec                                     ; F053 38
        sbc     #$15                            ; F054 E9 15
        clc                                     ; F056 18
        adc     #$78                            ; F057 69 78
        sta     $81                             ; F059 85 81
        lda     #$00                            ; F05B A9 00
        sta     $80                             ; F05D 85 80
        lda     $84                             ; F05F A5 84
        sta     $90                             ; F061 85 90
        lda     ($3E),y                         ; F063 B1 3E
        sta     $82                             ; F065 85 82
        iny                                     ; F067 C8
        lda     ($3E),y                         ; F068 B1 3E
        sta     $83                             ; F06A 85 83
        ldy     #$F1                            ; F06C A0 F1
        lda     ($80),y                         ; F06E B1 80
        ldx     $1E                             ; F070 A6 1E
        bne     LF077                           ; F072 D0 03
        inc     $1E                             ; F074 E6 1E
        txa                                     ; F076 8A
LF077:  tax                                     ; F077 AA
        clc                                     ; F078 18
        adc     #$04                            ; F079 69 04
        sta     ($80),y                         ; F07B 91 80
        txa                                     ; F07D 8A
        tay                                     ; F07E A8
        lda     $84                             ; F07F A5 84
        clc                                     ; F081 18
        adc     $97                             ; F082 65 97
        sta     ($80),y                         ; F084 91 80
        lda     $98                             ; F086 A5 98
        clc                                     ; F088 18
        adc     $1F                             ; F089 65 1F
        iny                                     ; F08B C8
        sta     ($80),y                         ; F08C 91 80
        iny                                     ; F08E C8
        lda     $82                             ; F08F A5 82
        sta     ($80),y                         ; F091 91 80
        lda     $83                             ; F093 A5 83
        iny                                     ; F095 C8
        sta     ($80),y                         ; F096 91 80
        jmp     field.eval_and_draw_string      ; F098 4C FA EE
; ----------------------------------------------------------------------------
LF09B:  bne     LF0F0                           ; F09B D0 53
LF09D:  lda     $84                             ; F09D A5 84
        beq     LF0ED                           ; F09F F0 4C
        lda     $90                             ; F0A1 A5 90
        pha                                     ; F0A3 48
        jsr     LF3E4                           ; F0A4 20 E4 F3
        lda     #$18                            ; F0A7 A9 18
        jsr     call_switchFirst2Banks          ; F0A9 20 03 FF
        lda     $84                             ; F0AC A5 84
        asl     a                               ; F0AE 0A
        tax                                     ; F0AF AA
        bcs     LF0BD                           ; F0B0 B0 0B
        lda     $8800,x                         ; F0B2 BD 00 88
        sta     $3E                             ; F0B5 85 3E
        lda     $8801,x                         ; F0B7 BD 01 88
        jmp     LF0C5                           ; F0BA 4C C5 F0
; ----------------------------------------------------------------------------
LF0BD:  lda     $8900,x                         ; F0BD BD 00 89
        sta     $3E                             ; F0C0 85 3E
        lda     $8901,x                         ; F0C2 BD 01 89
LF0C5:  pha                                     ; F0C5 48
        and     #$1F                            ; F0C6 29 1F
        ora     #$80                            ; F0C8 09 80
        sta     $3F                             ; F0CA 85 3F
        pla                                     ; F0CC 68
        lsr     a                               ; F0CD 4A
        lsr     a                               ; F0CE 4A
        lsr     a                               ; F0CF 4A
        lsr     a                               ; F0D0 4A
        lsr     a                               ; F0D1 4A
        clc                                     ; F0D2 18
        adc     #$18                            ; F0D3 69 18
        jsr     call_switchFirst2Banks          ; F0D5 20 03 FF
        jsr     field.eval_and_draw_string      ; F0D8 20 FA EE
        jsr     LF3ED                           ; F0DB 20 ED F3
        pla                                     ; F0DE 68
        tax                                     ; F0DF AA
        lda     $B9                             ; F0E0 A5 B9
        beq     LF0ED                           ; F0E2 F0 09
        lda     #$00                            ; F0E4 A9 00
        sta     $B9                             ; F0E6 85 B9
        lda     #$73                            ; F0E8 A9 73
        sta     $07A0,x                         ; F0EA 9D A0 07
LF0ED:  jmp     field.eval_and_draw_string      ; F0ED 4C FA EE
; ----------------------------------------------------------------------------
LF0F0:  cmp     #$19                            ; F0F0 C9 19
        bne     LF114                           ; F0F2 D0 20
        ldx     $84                             ; F0F4 A6 84
        lda     $7B80,x                         ; F0F6 BD 80 7B
        sta     $84                             ; F0F9 85 84
        bne     LF10A                           ; F0FB D0 0D
        lda     $79F1                           ; F0FD AD F1 79
        sec                                     ; F100 38
        sbc     #$04                            ; F101 E9 04
        sta     $79F1                           ; F103 8D F1 79
        lda     #$FF                            ; F106 A9 FF
        clc                                     ; F108 18
        rts                                     ; F109 60
; ----------------------------------------------------------------------------
LF10A:  lda     #$00                            ; F10A A9 00
        sta     $B9                             ; F10C 85 B9
        jmp     LF09D                           ; F10E 4C 9D F0
; ----------------------------------------------------------------------------
LF111:  jmp     field.eval_and_draw_string      ; F111 4C FA EE
; ----------------------------------------------------------------------------
LF114:  cmp     #$1A                            ; F114 C9 1A
        bne     LF128                           ; F116 D0 10
        lda     #$00                            ; F118 A9 00
        sta     $B9                             ; F11A 85 B9
        ldx     $84                             ; F11C A6 84
        lda     $60C0,x                         ; F11E BD C0 60
        beq     LF111                           ; F121 F0 EE
        sta     $84                             ; F123 85 84
        jmp     LF09D                           ; F125 4C 9D F0
; ----------------------------------------------------------------------------
LF128:  cmp     #$1B                            ; F128 C9 1B
        bne     LF13F                           ; F12A D0 13
        jsr     LF3AC                           ; F12C 20 AC F3
        ldx     $84                             ; F12F A6 84
        lda     $7C00,x                         ; F131 BD 00 7C
        beq     LF111                           ; F134 F0 DB
        sta     $84                             ; F136 85 84
        lda     #$00                            ; F138 A9 00
        sta     $B9                             ; F13A 85 B9
        jmp     LF09D                           ; F13C 4C 9D F0
; ----------------------------------------------------------------------------
LF13F:  cmp     #$1C                            ; F13F C9 1C
        bne     LF14C                           ; F141 D0 09
        ldx     $84                             ; F143 A6 84
        lda     $60E0,x                         ; F145 BD E0 60
        beq     LF111                           ; F148 F0 C7
        bne     LF166                           ; F14A D0 1A
LF14C:  cmp     #$1D                            ; F14C C9 1D
        bne     LF17A                           ; F14E D0 2A
        lda     $84                             ; F150 A5 84
        lsr     a                               ; F152 4A
        lda     #$0A                            ; F153 A9 0A
        bcc     LF159                           ; F155 90 02
        lda     #$18                            ; F157 A9 18
LF159:  sta     $90                             ; F159 85 90
        ldx     $84                             ; F15B A6 84
        lda     $7C00,x                         ; F15D BD 00 7C
        beq     LF111                           ; F160 F0 AF
        tax                                     ; F162 AA
        lda     $6300,x                         ; F163 BD 00 63
LF166:  sta     $80                             ; F166 85 80
        ldx     $90                             ; F168 A6 90
        inc     $90                             ; F16A E6 90
        lda     #$C8                            ; F16C A9 C8
        sta     $07A0,x                         ; F16E 9D A0 07
        jsr     switch_to_character_logics_bank ; F171 20 27 F7
        jsr     L8B29                           ; F174 20 29 8B
        jmp     LF291                           ; F177 4C 91 F2
; ----------------------------------------------------------------------------
LF17A:  cmp     #$1E                            ; F17A C9 1E
        bne     LF19A                           ; F17C D0 1C
        jsr     getLastValidJobId               ; F17E 20 8A F3
        cmp     $84                             ; F181 C5 84
        bcs     LF192                           ; F183 B0 0D
        lda     $78F1                           ; F185 AD F1 78
        sec                                     ; F188 38
        sbc     #$04                            ; F189 E9 04
        sta     $78F1                           ; F18B 8D F1 78
        lda     #$FF                            ; F18E A9 FF
        clc                                     ; F190 18
        rts                                     ; F191 60
; ----------------------------------------------------------------------------
LF192:  lda     $84                             ; F192 A5 84
        clc                                     ; F194 18
        adc     #$E2                            ; F195 69 E2
        jmp     LF2D8                           ; F197 4C D8 F2
; ----------------------------------------------------------------------------
LF19A:  cmp     #$1F                            ; F19A C9 1F
        bne     LF1BB                           ; F19C D0 1D
        ldx     $84                             ; F19E A6 84
        lda     $7200,x                         ; F1A0 BD 00 72
        sta     $80                             ; F1A3 85 80
        ldx     $90                             ; F1A5 A6 90
        inc     $90                             ; F1A7 E6 90
        lda     #$C8                            ; F1A9 A9 C8
        sta     $07A0,x                         ; F1AB 9D A0 07
        lda     #$00                            ; F1AE A9 00
        sta     $81                             ; F1B0 85 81
        jsr     switch_to_character_logics_bank ; F1B2 20 27 F7
        jsr     L8B57                           ; F1B5 20 57 8B
        jmp     LF291                           ; F1B8 4C 91 F2
; ----------------------------------------------------------------------------
LF1BB:  cmp     #$20                            ; F1BB C9 20
        bne     LF1D1                           ; F1BD D0 12
        ldx     $84                             ; F1BF A6 84
        lda     $60C0,x                         ; F1C1 BD C0 60
        beq     LF1F6                           ; F1C4 F0 30
        sta     $84                             ; F1C6 85 84
        tax                                     ; F1C8 AA
        lda     $7200,x                         ; F1C9 BD 00 72
        sta     $B9                             ; F1CC 85 B9
        jmp     LF09D                           ; F1CE 4C 9D F0
; ----------------------------------------------------------------------------
LF1D1:  cmp     #$21                            ; F1D1 C9 21
        bne     LF1F9                           ; F1D3 D0 24
        ldx     $84                             ; F1D5 A6 84
        lda     $7B80,x                         ; F1D7 BD 80 7B
        beq     LF1F6                           ; F1DA F0 1A
        lda     $7B90,x                         ; F1DC BD 90 7B
        sta     $80                             ; F1DF 85 80
        lda     $7B98,x                         ; F1E1 BD 98 7B
        sta     $81                             ; F1E4 85 81
        lda     $7BA0,x                         ; F1E6 BD A0 7B
        sta     $82                             ; F1E9 85 82
        jsr     switch_to_character_logics_bank ; F1EB 20 27 F7
        jsr     L8B78                           ; F1EE 20 78 8B
        lda     $93                             ; F1F1 A5 93
        jsr     call_switchFirst2Banks          ; F1F3 20 03 FF
LF1F6:  jmp     field.eval_and_draw_string      ; F1F6 4C FA EE
; ----------------------------------------------------------------------------
LF1F9:  cmp     #$22                            ; F1F9 C9 22
        bne     LF1F6                           ; F1FB D0 F9
        lda     #$00                            ; F1FD A9 00
        sta     $B9                             ; F1FF 85 B9
        ldx     $84                             ; F201 A6 84
        lda     $60C0,x                         ; F203 BD C0 60
        beq     LF1F6                           ; F206 F0 EE
        sta     $84                             ; F208 85 84
        lda     $90                             ; F20A A5 90
        pha                                     ; F20C 48
        jsr     LF3E4                           ; F20D 20 E4 F3
        lda     #$18                            ; F210 A9 18
        jsr     call_switchFirst2Banks          ; F212 20 03 FF
        lda     $84                             ; F215 A5 84
        asl     a                               ; F217 0A
        tax                                     ; F218 AA
        bcs     LF229                           ; F219 B0 0E
        lda     $8800,x                         ; F21B BD 00 88
        clc                                     ; F21E 18
        adc     #$01                            ; F21F 69 01
        sta     $3E                             ; F221 85 3E
        lda     $8801,x                         ; F223 BD 01 88
        jmp     LF234                           ; F226 4C 34 F2
; ----------------------------------------------------------------------------
LF229:  lda     $8900,x                         ; F229 BD 00 89
        clc                                     ; F22C 18
        adc     #$01                            ; F22D 69 01
        sta     $3E                             ; F22F 85 3E
        lda     $8901,x                         ; F231 BD 01 89
LF234:  adc     #$00                            ; F234 69 00
        jmp     LF0C5                           ; F236 4C C5 F0
; ----------------------------------------------------------------------------
